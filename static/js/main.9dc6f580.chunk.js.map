{"version":3,"sources":["components/HeaderComponent.tsx","components/PointClass.tsx","components/Grid_StateComponent.tsx","components/TransitionRulesComponent.tsx","components/SimulatorOptionsComponent.tsx","components/ColourMappingComponent.tsx","components/ImportExportComponent.tsx","SurfaceCRNapp.tsx","index.tsx","../../surface_crn/Species_Matcher.js","../../surface_crn/Transition_Rule.js","../../surface_crn/Colour.js","../../surface_crn/Colour_Map.js","../../surface_crn/Parser.js","../../surface_crn/Surface_CRN.js"],"names":["HeaderComponent","className","React","Component","Point","x","y","this","p","s","origin","CRN_GridComponent","props","onCellDataChanged","event","setState","data","state","map","row","i","rowIndex","fieldName","newData","model","columns","createCols","current_state","createData","colour_map","grid_type","offset","console","log","rowHeight","colNum","length","push","width","toString","j","getText","renderBackground","context","cellBounds","cell","metadata","colour","find_colour","Colour","white","fillStyle","rgb","join","fillRect","left","top","height","renderText","text","cellHasTextFunction","r","g","b","fillText","editor","serialise","deserialise","prev","trim","match","TransitionRulesComponent","rules_list","id","SimulatorOptionsComponent","ColourMappingComponent","ImportExportComponent","import_code","type","multiple","onClick","SurfaceCRNapp","initial_state_component","Surface_CRN","Array","fill","ref","elem","bind","a","files","document","getElementById","parser","parse_import_files","new_model","update_page","update_rules","rules","update_colour_map","update_init_state","rule_list","textContent","createElement","reactants","products","entries","item","appendChild","species","inp","value","original_string","colour_list","name","c","init_state","updateColsAndData","ReactDOM","render","StrictMode","Object","defineProperty","exports","Species_Matcher","init","Error","replace","matcher","RegExp","exec","default","is_mono","rate","assign","red","green","blue","Colour_Map","some","s1","includes","Map","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","parse_code","Species_Matcher_1","require","Transition_Rule_1","Colour_1","Surface_CRN_1","parse_line","line","program","rule","_","split","start","end","parse_rule","name_colour","vars","sp","parse_colour","set","option","parse_option","val","key","options","parse_init_state","init_state_section","input_files","Manifest_File","imported","manifest_maps","file","m","f","lines","Transition_Rule","Colour_Map_1","Parser_1"],"mappings":"4QAEqBA,E,4JACpB,WACC,OAAO,wBAAQC,UAAU,OAAlB,SACN,sBAAKA,UAAU,OAAf,UACC,oBAAIA,UAAU,aAAd,mCAGA,oBAAIA,UAAU,yBAAd,2BAGA,oBAAIA,UAAU,0BAAd,qC,GAVyCC,IAAMC,W,gBCD7CC,E,WAML,WAAYC,EAAWC,GAAa,yBALpCD,OAKmC,OAJnCC,OAImC,EAClCC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,E,uCAGV,SAAIE,GAAa,OAAO,IAAIJ,EAAMG,KAAKF,EAAIG,EAAEH,EAAGE,KAAKD,EAAIE,EAAEF,K,sBAC3D,SAASE,GAAa,OAAO,IAAIJ,EAAMG,KAAKF,EAAIG,EAAEH,EAAGE,KAAKD,EAAIE,EAAEF,K,mBAChE,SAAMG,GAAc,OAAO,IAAIL,EAAMG,KAAKF,EAAII,EAAGF,KAAKD,EAAIG,O,KAbrDL,EAIEM,OAAiB,IAAIN,EAAM,EAAE,GAYtBA,Q,QCoIAO,E,kDAjId,WAAYC,GAAwB,IAAD,uBAClC,cAAMA,IA6GCC,kBAAoB,SAACC,GAC5B,EAAKC,SAAS,CACbC,KAAM,EAAKC,MAAMD,KAAKE,KAAI,SAACC,EAAKC,GAC/B,OAAIA,IAAMN,EAAMO,SACR,2BACHF,GADJ,kBAEEL,EAAMQ,UAFR,2BAGKH,EAAIL,EAAMQ,YAHf,IAIEN,KAAMF,EAAMS,YAIPJ,QAxHV,IAAKK,EAASZ,EAATY,MAF6B,OAGlC,EAAKP,MAAQ,CACZQ,QAAU,EAAKC,WAAWF,EAAMG,eAChCX,KAAO,EAAKY,WAAWJ,EAAMG,eAC7BE,WAAaL,EAAMK,WACnBC,UAAYN,EAAMM,UAClBC,OAAS3B,EAAMM,QARkB,E,0CAYnC,WAGC,OAFAsB,QAAQC,IAAI,WAEL,sBAAKhC,UAAU,oBAAf,UACJ,iDACA,cAAC,kBAAD,CACCwB,QAASlB,KAAKU,MAAMQ,QACpBT,KAAMT,KAAKU,MAAMD,KACjBkB,UAAW,GACXrB,kBAAmBN,KAAKM,yB,+BAK7B,SAAyBc,GACxBpB,KAAKQ,SAAS,CAACU,QAASlB,KAAKmB,WAAWC,GAAgBX,KAAMT,KAAKqB,WAAWD,O,wBAG/E,SAAmBA,GAClB,IAAIF,EAAU,GACVU,EAAS,EACgB,IAAzBR,EAAcS,SACjBD,EAASR,EAAc,GAAGS,QAE3BX,EAAQY,KAAK,CAACf,UAAY,aAAcgB,MAAO,KAC/C,IAAK,IAAIlB,EAAI,EAAGA,EAAIe,EAAQf,IAAKK,EAAQY,KAAK,CAACf,UAAYF,EAAEmB,WAAYD,MAAO,KAGhF,OAFAb,EAAQY,KAAK,CAACf,UAAY,cAAegB,MAAO,KAEzCb,I,wBAGR,SAAmBE,GAElB,IAF+C,IAAD,OAC1CX,EAAuC,GAClCI,GAAK,EAAGA,GAAKO,EAAcS,OAAQhB,IAAK,CAChD,IAAID,EAA+B,GACnC,IAAW,IAAPC,GAAYA,IAAMO,EAAcS,OACnC,IAAK,IAAII,EAAI,EAAGA,EAAIb,EAAc,GAAGS,OAAQI,IAC5CrB,EAAIqB,EAAED,YAAc,CACnBvB,KAAMW,EAAcP,GAAGoB,GACvBC,QAAS,SAACpC,GAAD,OAAqBA,GAAQ,IACtCqC,iBAAkB,SAACC,EAAoCC,EAAyBC,EAA+BC,GAE9G,GAAkB,OAAdD,EAAK7B,KAAe,CACvB,IAAI+B,EAAS,EAAK9B,MAAMY,WAAWmB,YAAYH,EAAK7B,MACtC,MAAV+B,IACHA,EAASE,SAAOC,OAEjBP,EAAQQ,UAAY,OAASJ,EAAOK,MAAMC,KAAK,KAAO,IACtDV,EAAQW,SAASV,EAAWW,KAAMX,EAAWY,IAAKZ,EAAWN,MAAOM,EAAWa,UAGjFC,WAAa,SAACf,EAAmCC,EAAwBC,GACxE,IAAMc,EAAOC,8BAAoBf,GAAQA,EAAKJ,QAAQI,EAAK7B,MAAQ6B,EAAKc,KAExE,GAAIA,EAAM,CACT,IAAIZ,EAAS,EAAK9B,MAAMY,WAAWmB,YAAYH,EAAK7B,MACtC,MAAV+B,IACHA,EAASE,SAAOC,OAEjB,MAAcH,EAAOK,MAArB,mBAAKS,EAAL,KAAOC,EAAP,KAASC,EAAT,KACApB,EAAQQ,UAAiB,KAAJU,EAAgB,KAAJC,EAAgB,KAAJC,EAAa,IAAM,QAAU,QAC1EpB,EAAQqB,SAASL,EAAKf,EAAWW,KAAO,EAAEX,EAAWY,IAAM,GAAIZ,EAAWN,MAAQ,KAUpF2B,OAAQ,CACPC,UAAW,SAAC7D,GAAD,OAAqBA,GAAQ,IACxC8D,YAAa,SAACR,EAAcS,GAE3B,OADAT,EAAOA,EAAKU,QACHC,MAAM,SACPX,EAEAS,UAOZ,GAA4B,GAAxBzC,EAAcS,OACjB,IAAK,IAAII,EAAI,EAAGA,EAAIb,EAAc,GAAGS,OAAQI,IAC5CrB,EAAIqB,EAAED,YAAc,CAACvB,KAAM,KAAM2C,KAAO,GAAIjB,iBAAmB,kBAAM,IAIxEvB,EAAG,WAAiB,CAACH,KAAM,KAAM2C,KAAO,GAAIjB,iBAAmB,kBAAM,IACrEvB,EAAG,YAAkB,CAACH,KAAM,KAAM2C,KAAO,GAAIjB,iBAAmB,kBAAM,IACtE1B,EAAKqB,KAAKlB,GAEX,OAAOH,M,GA7GuBd,IAAMC,WCdjBoE,E,kDAGpB,WAAYC,GAAiC,IAAD,8BAC3C,cAAMA,IAHPA,gBAE4C,EAE3C,EAAKA,WAAaA,EAFyB,E,0CAK5C,WACC,OAAO,sBAAKvE,UAAU,yBAAf,UACN,oBAAIA,UAAU,eAAd,gCAEA,qBAAKwE,GAAG,iBAAR,SACC,uBAAOA,GAAG,uB,GAbwCvE,IAAMC,WCFvCuE,E,4JACpB,WACC,OAAO,qBAAKzE,UAAU,2BAAf,SACN,2D,GAHoDC,IAAMC,WCAxCwE,E,4JACpB,WACC,OAAO,sBAAK1E,UAAU,0BAAf,UACN,kDAEA,qBAAKwE,GAAG,mBAAR,SACC,uBAAOA,GAAG,yB,GANsCvE,IAAMC,WCuB3CyE,EAnBf,kDAEC,WAAmBhE,GAAqB,uCACjCA,GAHR,0CAOC,WACC,IAAQiE,EAAgBtE,KAAKK,MAArBiE,YACR,OAAO,sBAAK5E,UAAU,iCAAf,UACL,iDACA,gCACC,uBAAO6E,KAAK,OAAOL,GAAG,eAAeM,UAAQ,IAC7C,wBAAQD,KAAK,SAASL,GAAG,gBAAgBO,QAASH,EAAlD,gCAbL,GAA2C3E,IAAMC,WCS5B8E,E,kDAIpB,WAAYzE,GAAS,IAAD,8BACnB,cAAMA,IAHP0E,wBAAqD,KAIpD,EAAKjE,MAAQ,CAACO,MAAQ,IAAI2D,IAAY,CAACxD,cAAgByD,MAAM,GAAGC,KAAKD,MAAM,GAAGC,KAAK,SAFhE,E,0CAKpB,WAAU,IAAD,OACR,OAAO,sBAAKpF,UAAU,iBAAf,UACL,cAAC,EAAD,IACA,cAAC,EAAD,CAAmBuB,MAAOjB,KAAKU,MAAMO,MAAO8D,IAAK,SAAAC,GAAI,OAAI,EAAKL,wBAA0BK,KACxF,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAuBV,YAAatE,KAAKsE,YAAYW,KAAKjF,a,gEAI7D,8BAAAkF,EAAA,yDAEe,QADRC,EAASC,SAASC,eAAe,gBAAqCF,OAD7E,iEAI2CP,IAAYU,OAAOC,mBAAnB,YAA0CJ,IAJrF,QAMmB,KAFdK,EAJL,UASExF,KAAKQ,SAAS,CAACS,MAAQuE,IACvBxF,KAAKyF,eAVP,gD,+EAcA,WAECzF,KAAK0F,aAAa1F,KAAKU,MAAMO,MAAM0E,OACnC3F,KAAK4F,kBAAkB5F,KAAKU,MAAMO,MAAMK,YACxCtB,KAAK6F,kBAAkB7F,KAAKU,MAAMO,MAAMG,cAAepB,KAAKU,MAAMO,MAAMK,WAAYtB,KAAKU,MAAMO,MAAMM,a,0BAGtG,SAAaoE,GAEZ,IAAIG,EAAYV,SAASC,eAAe,aAExC,GAAkB,OAAdS,EAAJ,CAEAA,EAAUC,YAAc,GANe,oBAQzBJ,GARyB,IAQvC,2BAAqB,CAAC,IAAD,EAAZrC,EAAY,QAChB1C,EAAMwE,SAASY,cAAc,MADb,cAEE,CAAC1C,EAAE2C,UAAW3C,EAAE4C,UAAUC,WAF5B,IAEpB,2BAA2D,CAAC,IACvDC,EADsD,yBAAjDvF,EAAiD,KAA9C0D,EAA8C,KAEhD,IAAN1D,KACHuF,EAAOhB,SAASY,cAAc,OACzBD,YAAc,KACnBnF,EAAIyF,YAAYD,IALyC,oBAOjC7B,EAAK4B,WAP4B,IAO1D,2BAAyC,CAAC,IAAD,yBAA/BlE,EAA+B,KAA5BqE,EAA4B,KAC9B,IAANrE,KACHmE,EAAOhB,SAASY,cAAc,OACzBD,YAAc,IACnBnF,EAAIyF,YAAYD,IAEjBA,EAAOhB,SAASY,cAAc,MAC9B,IAAIO,EAAMnB,SAASY,cAAc,SACjCO,EAAIhC,KAAO,OACXgC,EAAIC,MAAQF,EAAQG,gBACpBL,EAAKC,YAAYE,GACjB3F,EAAIyF,YAAYD,IAlByC,gCAFvC,8BAuBpBN,EAAUO,YAAYzF,IA/BgB,kC,+BAmCxC,SAAkBU,GAEjB,IAAIoF,EAActB,SAASC,eAAe,eAC1C,GAAmB,MAAfqB,EAAJ,CAEAA,EAAYX,YAAc,GALgB,oBAOpBzE,GAPoB,IAO1C,2BAAkC,CAAC,IAE9B8E,EAF6B,yBAAxBO,EAAwB,KAAlBC,EAAkB,KAC7BhG,EAAMwE,SAASY,cAAc,MAEjCI,EAAOhB,SAASY,cAAc,MAC9B,IAAIO,EAAMnB,SAASY,cAAc,SACjCO,EAAIhC,KAAO,OACXgC,EAAIC,MAAQG,EACZP,EAAKC,YAAYE,GACjB3F,EAAIyF,YAAYD,IAEhBA,EAAOhB,SAASY,cAAc,OACzBD,YAAc,IAAIa,EAAE/D,MAAMC,KAAK,KAAK,IACzClC,EAAIyF,YAAYD,GAZiB,oBAabQ,EAAEN,SAbW,IAajC,2BAA+B,CAAC,IAAvBA,EAAsB,QAC9BF,EAAOhB,SAASY,cAAc,OAC9BO,EAAMnB,SAASY,cAAc,UACzBzB,KAAO,OACXgC,EAAIC,MAAQF,EAAQG,gBACpBL,EAAKC,YAAYE,GACjB3F,EAAIyF,YAAYD,IAnBgB,8BAqBjCM,EAAYL,YAAYzF,IA5BiB,kC,+BAgC3C,SAAkBiG,EAAyBvF,EAAyBC,GACnEvB,KAAK2E,wBAAyBnE,SAAS,CAACY,cAAeyF,EAAYvF,WAAYA,EAAYC,UAAWA,IACtGvB,KAAK2E,wBAAyBmC,kBAAkBD,O,GA9GPlH,IAAMC,WCXjDmH,IAASC,OACR,eAAC,IAAMC,WAAP,WACC,4DACA,cAAC,EAAD,OAED7B,SAASC,eAAe,U,mDCRzB6B,OAAOC,eAAeC,EAAS,aAAc,CAAEZ,OAAO,I,IAChDa,E,WACF,WAAYC,GAER,GAFc,UACdtH,KAAKyG,gBAAkBa,EACc,OAAjCA,EAAKvD,MAAM,kBACX,MAAMwD,QAIVD,EAAOA,EAAKE,QAAQ,eAAgB,YACpCxH,KAAKyH,QAAU,OAASH,EAAO,K,kCAEnC,SAASpH,GACL,OAA8C,OAAtC,IAAIwH,OAAO1H,KAAKyH,SAAUE,KAAKzH,K,qBAE3C,WACI,OAA+C,OAAxCF,KAAKyG,gBAAgB1C,MAAM,a,KAG1CqD,EAAQQ,QAAUP,G,2CCnBlBH,OAAOC,eAAeC,EAAS,aAAc,CAAEZ,OAAO,IAUtDY,EAAQQ,QARJ,WAAYN,GAAM,UACdtH,KAAK6H,SAAU,EACf7H,KAAKiG,UAAY,GACjBjG,KAAKkG,SAAW,GAChBlG,KAAK8H,KAAO,EACZZ,OAAOa,OAAO/H,KAAMsH,K,mDCP5BJ,OAAOC,eAAeC,EAAS,aAAc,CAAEZ,OAAO,I,IAChD9D,E,WACF,WAAY4E,GAAM,UACdtH,KAAKgI,IAAM,EACXhI,KAAKiI,MAAQ,EACbjI,KAAKkI,KAAO,EACZlI,KAAKsG,QAAU,GACftG,KAAK2G,KAAO,GACZO,OAAOa,OAAO/H,KAAMsH,G,6BAExB,WACI,MAAO,CAACtH,KAAKgI,IAAKhI,KAAKiI,MAAOjI,KAAKkI,U,KAG3Cd,EAAQQ,QAAUlF,EAClBA,EAAOC,MAAQ,IAAID,EAAO,CAAEsF,IAAK,IAAKC,MAAO,IAAKC,KAAM,O,mGCfxDhB,OAAOC,eAAeC,EAAS,aAAc,CAAEZ,OAAO,I,IAChD2B,E,8BACF,WAAYb,GAAM,uBACd,eACAJ,OAAOa,OAAP,KAAoBT,GAFN,E,qCAIlB,SAAYpH,GAAG,UACQF,MADR,IACX,2BAAyB,oBAAZ4G,GAAY,WACrB,GAAIA,EAAEN,QAAQ8B,MAAK,SAACC,GAAD,OAAQA,EAAGC,SAASpI,MACnC,OAAO0G,GAHJ,8BAMX,OAAO,S,KAXU2B,MAczBnB,EAAQQ,QAAUO,G,2ECfdK,EAAaxI,MAAQA,KAAKwI,WAAc,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUxC,GAAS,IAAMyC,EAAKL,EAAUM,KAAK1C,IAAW,MAAO2C,GAAKJ,EAAOI,IACpF,SAASC,EAAS5C,GAAS,IAAMyC,EAAKL,EAAS,MAAUpC,IAAW,MAAO2C,GAAKJ,EAAOI,IACvF,SAASF,EAAKI,GAJlB,IAAe7C,EAIa6C,EAAOC,KAAOR,EAAQO,EAAO7C,QAJ1CA,EAIyD6C,EAAO7C,MAJhDA,aAAiBmC,EAAInC,EAAQ,IAAImC,GAAE,SAAUG,GAAWA,EAAQtC,OAIT+C,KAAKP,EAAWI,GAClGH,GAAML,EAAYA,EAAUY,MAAMf,EAASC,GAAc,KAAKQ,YAGlEO,EAAmBzJ,MAAQA,KAAKyJ,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,IAExDxC,OAAOC,eAAeC,EAAS,aAAc,CAAEZ,OAAO,IACtDY,EAAQ7B,mBAAqB6B,EAAQwC,gBAAa,EAClD,IAAMC,EAAoBJ,EAAgBK,EAAQ,KAC5CC,EAAoBN,EAAgBK,EAAQ,KAC5CE,EAAWP,EAAgBK,EAAQ,KACnCG,EAAgBR,EAAgBK,EAAQ,IAwB9C,SAASI,EAAWC,EAAMC,GACtB,IAAIC,EAxBR,SAAoBF,GAChB,GAAwC,IAAnCA,EAAKpG,MAAM,QAAU,IAAIlC,OAC1B,OAAO,EACX,IAAIiG,EAAO,EAEX,GADAqC,EAAOA,EAAK3C,QAAQ,aAAa,SAAC8C,EAAGxK,GAAmB,OAAXgI,GAAQhI,EAAU,OACvCyK,MAAM,MAAM5J,KAAI,SAAAuE,GAAC,OAAIA,EAAEqF,MAAM,KAAK5J,KAAI,SAAA6C,GAAC,OAAI,IAAIqG,EAAkBjC,QAAQpE,EAAEM,cAAnG,SAAK0G,EAAL,KAAYC,EAAZ,KAEA,QAAID,EAAM3I,QAAU4I,EAAI5I,QAAU2I,EAAM3I,OAAS,GAAqB,GAAhB2I,EAAM3I,SAErD,IAAIkI,EAAkBnC,QAAQ,CAAE3B,UAAWuE,EAAOtE,SAAUuE,EAAK3C,KAAMA,EAAMD,QAAyB,GAAhB2C,EAAM3I,SAexF6I,CAAWP,GACtB,IAAa,IAATE,EAEA,OADAD,EAAQzE,MAAM7D,KAAKuI,IACZ,EAEX,IAC2B,EADvBM,EAbR,SAAsBR,GAClB,IAAIS,EAAOT,EAAKpG,MAAM,8EACtB,GAAY,MAAR6G,EACA,OAAO,EACX,IAAIC,EAAKD,EAAK,GAAGL,MAAM,YAAY5J,KAAI,SAAAuE,GAAC,OAAI,IAAI2E,EAAkBjC,QAAQ1C,EAAEpB,WAC5E,MAAO,CAAC8G,EAAK,GAAI,IAAIZ,EAASpC,QAAQ,CAAEjB,KAAMiE,EAAK,GAAItE,QAASuE,EAAI7C,KAAM4C,EAAK,GAAI3C,OAAQ2C,EAAK,GAAI1C,MAAO0C,EAAK,MAQ9FE,CAAaX,GAC/B,IAAoB,IAAhBQ,EAEA,OADA,EAAAP,EAAQ9I,YAAWyJ,IAAnB,UAA0BJ,KACnB,EAEX,IAAIK,EAvBR,SAAsBb,GAClB,OAAuC,IAAlCA,EAAKpG,MAAM,OAAS,IAAIlC,QAEtBsI,EAAKI,MAAM,KAAK5J,KAAI,SAAAuE,GAAC,OAAIA,EAAEpB,UAoBrBmH,CAAad,GAC1B,IAAe,IAAXa,EAAkB,CAClB,QAAiBA,EAAjB,GAAKE,EAAL,KAAUC,EAAV,KAEA,OADAf,EAAQgB,QAAQL,IAAIG,EAAKC,IAClB,EAEX,OAAO,EAEX,SAASE,EAAiBlB,GAEtB,OAAOA,EAAKI,MAAM,SAEtB,SAASX,EAAWnJ,GAChB,IADsB,EAClB6K,GAAqB,EACrBlB,EAAU,IAAIH,EAAcrC,QAFV,IAGLnH,GAHK,IAGtB,2BAAuB,KAAd0J,EAAc,QAEnB,GAAY,KADZA,EAAOA,EAAKrG,OAAO0D,QAAQ,MAAO,KAGlC,GAAK8D,EAOA,CACD,GAAY,mBAARnB,EAA2B,CAC3BmB,GAAqB,EACrB,SAEJ,IAAIJ,EAAMG,EAAiBlB,GAC3BC,EAAQhJ,cAAcU,KAAKoJ,OAbN,CACrB,GAAY,qBAARf,EAA6B,CAC7BmB,GAAqB,EACrB,SAEJpB,EAAWC,EAAMC,KAZH,8BAuBtB,OAAOA,EAEXhD,EAAQwC,WAAaA,EAsCrBxC,EAAQ7B,mBAnCR,SAA4BgG,GACxB,OAAO/C,EAAUxI,UAAM,OAAQ,EAAf,QAAuB,qHAC9BuL,EAD8B,uBAG/B9J,QAAQC,IAAI,kBAHmB,mBAIxB,GAJwB,OAM7B8J,EACF,aAAc,UACVxL,KAAKS,KAAO,GACZT,KAAKyL,UAAW,GAGpBC,EAAgB,IAAInD,IAZW,IAclBgD,GAdkB,yDAgBrB,OAFLI,EAd0B,QAe3BC,EAAI,IAAIJ,EAfmB,UAgBfG,EAAKvI,OAhBU,QAgB/BwI,EAAEnL,KAhB6B,OAgBF8J,MAAM,MAAM5J,KAAI,SAAAuE,GAAC,OAAIA,EAAEpB,OAAO0D,QAAQ,MAAO,OAC1EkE,EAAcX,IAAIY,EAAKhF,KAAMiF,GAjBE,sHAAAC,IAAA,yBAmBdH,GAnBc,IAmBnC,2BAAoC,qBAArBE,EAAqB,SAClBA,EAAEnL,MADgB,IAChC,2BAAsB,QACZsD,MAAM,cAFgB,gCAnBD,0BAAA8H,IA0B/BC,EAAQ,GA1BuB,IA2BhBJ,GA3BgB,IA2BnC,2BAAkC,qBAArBE,EAAqB,MACvBH,UACHK,EAAMhK,KAAN,MAAAgK,EAAK,EAASF,EAAEnL,OA7BW,0BAAAoL,IAAA,yBA+B5BjC,EAAWkC,IA/BiB,kE,+DC7FvCrC,EAAmBzJ,MAAQA,KAAKyJ,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,IAExDxC,OAAOC,eAAeC,EAAS,aAAc,CAAEZ,OAAO,IACtDY,EAAQ1E,OAAS0E,EAAQe,WAAaf,EAAQ2E,gBAAkB3E,EAAQC,qBAAkB,EAC1F,IAAMwC,EAAoBJ,EAAgBK,EAAQ,KAClD1C,EAAQC,gBAAkBwC,EAAkBjC,QAC5C,IAAMmC,EAAoBN,EAAgBK,EAAQ,KAClD1C,EAAQ2E,gBAAkBhC,EAAkBnC,QAC5C,IAAMoE,EAAevC,EAAgBK,EAAQ,KAC7C1C,EAAQe,WAAa6D,EAAapE,QAClC,IAAMoC,EAAWP,EAAgBK,EAAQ,KACzC1C,EAAQ1E,OAASsH,EAASpC,QAC1B,IAAMqE,EAAWnC,EAAQ,IACnBlF,EACF,aAAoB,IAAR3E,EAAQ,uDAAJ,GAAI,UAChBD,KAAKoB,cAAgB,GACrBpB,KAAK2F,MAAQ,GACb3F,KAAKsB,WAAa,IAAI0K,EAAapE,QACnC5H,KAAKoL,QAAU,IAAI7C,IACnBvI,KAAKuB,UAAY,SACjB2F,OAAOa,OAAO/H,KAAMC,IAG5BmH,EAAQQ,QAAUhD,EAClBA,EAAYU,OAAS,CAAEC,mBAAoB0G,EAAS1G,mBAAoBqE,WAAYqC,EAASrC,c","file":"static/js/main.9dc6f580.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class HeaderComponent extends React.Component {\r\n\trender() {\r\n\t\treturn <header className=\"grid\">\r\n\t\t\t<nav className=\"grid\">\r\n\t\t\t\t<h2 className=\"grid title\">\r\n\t\t\t\t\tSurface CRN Simulator\r\n\t\t\t\t</h2>\r\n\t\t\t\t<h4 className=\"grid simulator_options\">\r\n\t\t\t\t\t(sim options)\r\n\t\t\t\t</h4>\r\n\t\t\t\t<h4 className=\"grid simulator_controls\">\r\n\t\t\t\t\t(sim controls)\r\n\t\t\t\t</h4>\r\n\t\t\t</nav>\r\n\t\t</header>;\r\n\t}\r\n}","\r\nclass Point {\r\n\tx: number;\r\n\ty: number;\r\n\t\r\n\tstatic origin : Point = new Point(0,0);\r\n\t\r\n\tconstructor(x : number,y : number) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\t\r\n\tadd(p : Point) { return new Point(this.x + p.x, this.y + p.y) };\r\n\tsubtract(p : Point) { return new Point(this.x - p.x, this.y - p.y) };\r\n\tscale(s : number) { return new Point(this.x * s, this.y * s) };\r\n};\r\n\r\nexport default Point;","import React from 'react';\r\nimport Surface_CRN, {Species_Matcher, Transition_Rule, Colour_Map, Colour} from 'surface_crn';\r\nimport Point from './PointClass';\r\n\r\nimport {ReactCanvasGrid, ColumnDef, DataRow, CellDef, CustomDrawCallbackMetadata, CellDataChangeEvent, cellHasTextFunction} from 'react-canvas-grid';\r\n\r\ninterface CRN_GridProps {\r\n\tmodel : Surface_CRN\r\n}\r\n\r\ninterface CRN_GridState extends React.ComponentState {\r\n\tcolumns : ColumnDef[],\r\n\tdata: Array<DataRow<string | null>>,\r\n\tcolour_map : Colour_Map,\r\n\tgrid_type : 'square'|'hex',\r\n\toffset : Point,\r\n}\r\n\r\nclass CRN_GridComponent extends React.Component<CRN_GridProps, CRN_GridState> {\r\n\t\r\n\tconstructor(props : CRN_GridProps) {\r\n\t\tsuper(props);\r\n\t\tlet {model} = props;\r\n\t\tthis.state = {\r\n\t\t\tcolumns : this.createCols(model.current_state),\r\n\t\t\tdata : this.createData(model.current_state),\r\n\t\t\tcolour_map : model.colour_map,\r\n\t\t\tgrid_type : model.grid_type,\r\n\t\t\toffset : Point.origin\r\n\t\t};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconsole.log('rendAll');\r\n\t\t// TODO: render \"Initial State\" over canvas?\r\n\t\treturn <div className=\"panel state_panel\">\r\n\t\t\t\t\t<h3> Initial State </h3>\r\n\t\t\t\t\t<ReactCanvasGrid<string | null>\r\n\t\t\t\t\t\tcolumns={this.state.columns}\r\n\t\t\t\t\t\tdata={this.state.data}\r\n\t\t\t\t\t\trowHeight={20}\r\n\t\t\t\t\t\tonCellDataChanged={this.onCellDataChanged}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t}\r\n\t\r\n\tpublic updateColsAndData(current_state : string[][]) {\r\n\t\tthis.setState({columns: this.createCols(current_state), data: this.createData(current_state)});\r\n\t}\r\n\t\r\n\tprivate createCols(current_state : string[][]) {\r\n\t\tlet columns = [];\r\n\t\tlet colNum = 0;\r\n\t\tif (current_state.length !== 0) {\r\n\t\t\tcolNum = current_state[0].length;\r\n\t\t}\r\n\t\tcolumns.push({fieldName : 'addLeftCol', width: 20});\r\n\t\tfor (let i = 0; i < colNum; i++) columns.push({fieldName : i.toString(), width: 20});\r\n\t\tcolumns.push({fieldName : 'addRightCol', width: 20});\r\n\t\t\r\n\t\treturn columns;\r\n\t}\r\n\t\r\n\tprivate createData(current_state : string[][]) {\r\n\t\tlet data : Array<DataRow<string | null>> = [];\r\n\t\tfor (let i = -1; i <= current_state.length; i++) {\r\n\t\t\tlet row : DataRow<string | null> = {};\r\n\t\t\tif (i !== -1 && i !== current_state.length) {\r\n\t\t\t\tfor (let j = 0; j < current_state[0].length; j++) {\r\n\t\t\t\t\trow[j.toString()] = {\r\n\t\t\t\t\t\tdata: current_state[i][j],\r\n\t\t\t\t\t\tgetText: (x : string|null) => x ? x : '',\r\n\t\t\t\t\t\trenderBackground: (context : CanvasRenderingContext2D, cellBounds : ClientRect, cell : CellDef<string | null>, metadata : CustomDrawCallbackMetadata) => {\r\n\t\t\t\t\t\t\t//console.log('rend');\r\n\t\t\t\t\t\t\tif (cell.data !== null) {\r\n\t\t\t\t\t\t\t\tlet colour = this.state.colour_map.find_colour(cell.data);\r\n\t\t\t\t\t\t\t\tif (colour == null) {\r\n\t\t\t\t\t\t\t\t\tcolour = Colour.white;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcontext.fillStyle = 'rgb(' + colour.rgb().join(',') + ')';\r\n\t\t\t\t\t\t\t\tcontext.fillRect(cellBounds.left, cellBounds.top, cellBounds.width, cellBounds.height);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\trenderText : (context: CanvasRenderingContext2D, cellBounds: ClientRect, cell: CellDef<string | null>) => {\r\n\t\t\t\t\t\t\tconst text = cellHasTextFunction(cell) ? cell.getText(cell.data) : cell.text;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (text) {\r\n\t\t\t\t\t\t\t\tlet colour = this.state.colour_map.find_colour(cell.data!);\r\n\t\t\t\t\t\t\t\tif (colour == null) {\r\n\t\t\t\t\t\t\t\t\tcolour = Colour.white;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlet [r,g,b] = colour.rgb();\r\n\t\t\t\t\t\t\t\tcontext.fillStyle = (r * 0.299 + g * 0.587 + b * 0.114) > 186 ? 'black' : 'white';\r\n\t\t\t\t\t\t\t\tcontext.fillText(text,cellBounds.left + 2,cellBounds.top + 10, cellBounds.width - 4);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\tcontext.strokeStyle= \"black\";\r\n\t\t\t\t\t\t\tcontext.fillStyle = \"white\";\r\n\t\t\t\t\t\t\tcontext.lineWidth = 0.5;\r\n\t\t\t\t\t\t\tcontext.fillText(text,cellBounds.left + 2,cellBounds.top + 10, cellBounds.width - 4);\r\n\t\t\t\t\t\t\tcontext.strokeText(text,cellBounds.left + 2,cellBounds.top + 10, cellBounds.width - 4);\r\n\t\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\teditor: {\r\n\t\t\t\t\t\t\tserialise: (x : string|null) => x ? x : '',\r\n\t\t\t\t\t\t\tdeserialise: (text: string, prev : string|null) => {\r\n\t\t\t\t\t\t\t\ttext = text.trim();\r\n\t\t\t\t\t\t\t\tif (text.match(/^\\w+$/)) {\r\n\t\t\t\t\t\t\t\t\treturn text;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn prev;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (current_state.length != 0) {\r\n\t\t\t\t\tfor (let j = 0; j < current_state[0].length; j++) {\r\n\t\t\t\t\t\trow[j.toString()] = {data: null, text : '', renderBackground : () => 1};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trow['addLeftCol'] = {data: null, text : '', renderBackground : () => 1};\r\n\t\t\trow['addRightCol'] = {data: null, text : '', renderBackground : () => 1};\r\n\t\t\tdata.push(row);\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\t\r\n\tprivate onCellDataChanged = (event: CellDataChangeEvent<string | null>) => {\r\n\t\tthis.setState({\r\n\t\t\tdata: this.state.data.map((row, i) => {\r\n\t\t\t\tif (i === event.rowIndex) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...row,\r\n\t\t\t\t\t\t[event.fieldName]: {\r\n\t\t\t\t\t\t\t...row[event.fieldName],\r\n\t\t\t\t\t\t\tdata: event.newData,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn row;\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default CRN_GridComponent","import React from 'react';\r\n\r\nimport {Species_Matcher, Transition_Rule, Colour_Map, Colour} from 'surface_crn';\r\n\r\nexport default class TransitionRulesComponent extends React.Component {\r\n\trules_list : Transition_Rule[];\r\n\r\n\tconstructor(rules_list : Transition_Rule[]) {\r\n\t\tsuper(rules_list);\r\n\t\tthis.rules_list = rules_list;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div className=\"grid panel rules_panel\">\r\n\t\t\t<h3 className=\"panel_header\"> Transition Rules </h3>\r\n\t\t\t\r\n\t\t\t<div id=\"rule_container\">\r\n\t\t\t\t<table id=\"rule_list\">\r\n\t\t\t\t\t\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class SimulatorOptionsComponent extends React.Component {\r\n\trender() {\r\n\t\treturn <div className=\"grid panel options_panel\">\r\n\t\t\t<h3> Simulator Options </h3>\r\n\t\t</div>;\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class ColourMappingComponent extends React.Component {\r\n\trender() {\r\n\t\treturn <div className=\"grid panel colour_panel\">\r\n\t\t\t<h3> Colour Mapping </h3>\r\n\t\t\t\r\n\t\t\t<div id=\"colour_container\">\r\n\t\t\t\t<table id=\"colour_list\">\r\n\t\t\t\t\t\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}","import React, { useRef } from 'react';\r\n\r\ninterface ImportProps {\r\n\timport_code : () => Promise<void>,\r\n}\r\n\r\nexport class ImportExportComponent extends React.Component<ImportProps> {\r\n\t\r\n\tpublic constructor(props: ImportProps) {\r\n\t\tsuper(props);\r\n\t}\r\n\t\r\n\t\r\n\trender () {\r\n\t\tconst { import_code } = this.props;\r\n\t\treturn <div className=\"grid panel import_export_panel\">\r\n\t\t\t\t<h3> Import/Export </h3>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"file\" id=\"import_input\" multiple />\r\n\t\t\t\t\t<button type=\"submit\" id=\"import_submit\" onClick={import_code}> Import </button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport default ImportExportComponent;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Surface_CRN, {Species_Matcher, Transition_Rule, Colour_Map, Colour} from 'surface_crn';\r\nimport './index.css';\r\nimport HeaderComponent from './components/HeaderComponent';\r\nimport CRN_GridComponent from './components/Grid_StateComponent';\r\nimport TransitionRulesComponent from './components/TransitionRulesComponent';\r\nimport SimulatorOptionsComponent from './components/SimulatorOptionsComponent';\r\nimport ColourMappingComponent from './components/ColourMappingComponent';\r\nimport ImportExportComponent from './components/ImportExportComponent';\r\n\r\ninterface SurfaceCRNappState {\r\n\tmodel : Surface_CRN\r\n}\r\n\r\nexport default class SurfaceCRNapp extends React.Component<{}, SurfaceCRNappState> {\r\n\t\r\n\tinitial_state_component : CRN_GridComponent | null = null;\r\n\r\n\tconstructor(p : {}) {\r\n\t\tsuper(p);\r\n\t\tthis.state = {model : new Surface_CRN({current_state : Array(5).fill(Array(5).fill('I'))})};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div className=\"main_grid grid\">\r\n\t\t\t\t<HeaderComponent />\r\n\t\t\t\t<CRN_GridComponent model={this.state.model} ref={elem => this.initial_state_component = elem}/>\r\n\t\t\t\t<TransitionRulesComponent />\r\n\t\t\t\t<SimulatorOptionsComponent />\r\n\t\t\t\t<ColourMappingComponent />\r\n\t\t\t\t<ImportExportComponent import_code={this.import_code.bind(this)}/>\r\n\t\t\t</div>\r\n\t\t}\r\n\r\n\tasync import_code() {\r\n\t\tconst files = (document.getElementById(\"import_input\") as HTMLInputElement).files;\r\n\t\tif (files === null) return;\r\n\t\t\r\n\t\tlet new_model : Surface_CRN|false = await Surface_CRN.parser.parse_import_files([...files]);\r\n\t\t\r\n\t\tif (new_model === false) {\r\n\t\t\t//show errors\r\n\t\t} else {\r\n\t\t\tthis.setState({model : new_model});\r\n\t\t\tthis.update_page();\r\n\t\t}\r\n\t}\r\n\r\n\tupdate_page() {\r\n\t\t// TODO: move all these to component render sections\r\n\t\tthis.update_rules(this.state.model.rules);\r\n\t\tthis.update_colour_map(this.state.model.colour_map);\r\n\t\tthis.update_init_state(this.state.model.current_state, this.state.model.colour_map, this.state.model.grid_type);\r\n\t}\r\n\r\n\tupdate_rules(rules : Transition_Rule[]) {\r\n\t\t// TODO: convert to jsx style\r\n\t\tvar rule_list = document.getElementById(\"rule_list\");\r\n\r\n\t\tif (rule_list === null) return;\r\n\t\t\r\n\t\trule_list.textContent = '';\r\n\t\t\r\n\t\tfor (let r of rules) {\r\n\t\t\tvar row = document.createElement(\"tr\");\r\n\t\t\tfor (var [i, type] of [r.reactants, r.products].entries()) {\r\n\t\t\t\tvar item;\r\n\t\t\t\tif (i === 1) {\r\n\t\t\t\t\titem = document.createElement(\"td\");\r\n\t\t\t\t\titem.textContent = '=>';\r\n\t\t\t\t\trow.appendChild(item);\r\n\t\t\t\t}\r\n\t\t\t\tfor (var [j, species] of type.entries()) {\r\n\t\t\t\t\tif (j === 1) {\r\n\t\t\t\t\t\titem = document.createElement(\"td\");\r\n\t\t\t\t\t\titem.textContent = '+';\r\n\t\t\t\t\t\trow.appendChild(item);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titem = document.createElement(\"td\");\r\n\t\t\t\t\tvar inp = document.createElement(\"input\");\r\n\t\t\t\t\tinp.type = \"text\";\r\n\t\t\t\t\tinp.value = species.original_string;\r\n\t\t\t\t\titem.appendChild(inp);\r\n\t\t\t\t\trow.appendChild(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trule_list.appendChild(row);\r\n\t\t}\r\n\t}\r\n\r\n\tupdate_colour_map(colour_map : Colour_Map) {\r\n\t\t// TODO: convert to React style\r\n\t\tvar colour_list = document.getElementById(\"colour_list\");\r\n\t\tif (colour_list == null) return;\r\n\t\t\r\n\t\tcolour_list.textContent = '';\r\n\t\t\r\n\t\tfor (let [name, c] of colour_map) {\r\n\t\t\tvar row = document.createElement(\"tr\");\r\n\t\t\tvar item;\r\n\t\t\titem = document.createElement(\"td\");\r\n\t\t\tvar inp = document.createElement(\"input\");\r\n\t\t\tinp.type = \"text\";\r\n\t\t\tinp.value = name;\r\n\t\t\titem.appendChild(inp);\r\n\t\t\trow.appendChild(item);\r\n\r\n\t\t\titem = document.createElement(\"td\");\r\n\t\t\titem.textContent = '('+c.rgb().join(',')+')';\r\n\t\t\trow.appendChild(item);\r\n\t\t\tfor (var species of c.species) {\r\n\t\t\t\titem = document.createElement(\"td\");\r\n\t\t\t\tinp = document.createElement(\"input\");\r\n\t\t\t\tinp.type = \"text\";\r\n\t\t\t\tinp.value = species.original_string;\r\n\t\t\t\titem.appendChild(inp);\r\n\t\t\t\trow.appendChild(item);\r\n\t\t\t}\r\n\t\t\tcolour_list.appendChild(row);\r\n\t\t}\r\n\t}\r\n\r\n\tupdate_init_state(init_state : string[][], colour_map : Colour_Map, grid_type : 'hex'|'square') {\r\n\t\tthis.initial_state_component!.setState({current_state: init_state, colour_map: colour_map, grid_type: grid_type});\r\n\t\tthis.initial_state_component!.updateColsAndData(init_state);\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SurfaceCRNapp from './SurfaceCRNapp';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<title> Surface CRN Simulator </title>\n\t\t<SurfaceCRNapp />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Species_Matcher {\n    constructor(init) {\n        this.original_string = init;\n        if (init.match(/\\\\(\\d|\\(\\d+\\))/) !== null)\n            throw Error();\n        // Square brackets must contain only \\w (WRONG, can contain same as normal() )\n        //if (init.match(/\\[\\w+[^\\]\\w]/) !== null) throw Error();\n        // Todo: handle {}\n        init = init.replace(/\\\\\\((\\d+)\\)/g, \"(?:\\\\$1)\");\n        this.matcher = '^(?:' + init + ')$';\n    }\n    includes(s) {\n        return (new RegExp(this.matcher)).exec(s) !== null;\n    }\n    is_pure() {\n        return this.original_string.match(/^\\w+$/) === null;\n    }\n}\nexports.default = Species_Matcher;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Transition_Rule {\n    constructor(init) {\n        this.is_mono = true;\n        this.reactants = [];\n        this.products = [];\n        this.rate = 1;\n        Object.assign(this, init);\n    }\n}\nexports.default = Transition_Rule;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Colour {\n    constructor(init) {\n        this.red = 0;\n        this.green = 0;\n        this.blue = 0;\n        this.species = [];\n        this.name = \"\";\n        Object.assign(this, init);\n    }\n    rgb() {\n        return [this.red, this.green, this.blue];\n    }\n}\nexports.default = Colour;\nColour.white = new Colour({ red: 256, green: 256, blue: 256 });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Colour_Map extends Map {\n    constructor(init) {\n        super();\n        Object.assign(this, init);\n    }\n    find_colour(s) {\n        for (let [_, c] of this) {\n            if (c.species.some((s1) => s1.includes(s))) {\n                return c;\n            }\n        }\n        return null;\n    }\n}\nexports.default = Colour_Map;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse_import_files = exports.parse_code = void 0;\nconst Species_Matcher_1 = __importDefault(require(\"./Species_Matcher\"));\nconst Transition_Rule_1 = __importDefault(require(\"./Transition_Rule\"));\nconst Colour_1 = __importDefault(require(\"./Colour\"));\nconst Surface_CRN_1 = __importDefault(require(\"./Surface_CRN\"));\nfunction parse_rule(line) {\n    if ((line.match(/->/g) || []).length != 1)\n        return false;\n    let rate = 1;\n    line = line.replace(/\\((\\d+)\\)/, (_, x) => { rate = +x; return ''; });\n    let [start, end] = line.split('->').map(a => a.split('+').map(b => new Species_Matcher_1.default(b.trim()))); // Note change how transition rules are formed\n    //TODO: add more conditions (and error messages?)\n    if (start.length != end.length || start.length > 2 || start.length == 0)\n        return false;\n    return new Transition_Rule_1.default({ reactants: start, products: end, rate: rate, is_mono: start.length == 1 });\n}\nfunction parse_option(line) {\n    if ((line.match(/=/g) || []).length != 1)\n        return false;\n    return line.split('=').map(a => a.trim());\n}\nfunction parse_colour(line) {\n    let vars = line.match(/^(?:\\{([^}]+)\\})? *((?: *[^,: ]+,? *)+) *: *\\((\\d+) *, *(\\d+) *, *(\\d+)\\)$/);\n    if (vars == null)\n        return false;\n    var sp = vars[2].split(/,\\s*|\\s+/).map(a => new Species_Matcher_1.default(a.trim()));\n    return [vars[1], new Colour_1.default({ name: vars[1], species: sp, red: +vars[3], green: +vars[4], blue: +vars[5] })];\n}\nfunction parse_line(line, program) {\n    var rule = parse_rule(line);\n    if (rule !== false) {\n        program.rules.push(rule);\n        return true;\n    }\n    var name_colour = parse_colour(line);\n    if (name_colour !== false) {\n        program.colour_map.set(...name_colour);\n        return true;\n    }\n    var option = parse_option(line);\n    if (option !== false) {\n        let [val, key] = option;\n        program.options.set(val, key);\n        return true;\n    }\n    return false;\n}\nfunction parse_init_state(line) {\n    // TODO: add more error checking\n    return line.split(/\\s+|,/);\n}\nfunction parse_code(data) {\n    let init_state_section = false;\n    let program = new Surface_CRN_1.default();\n    for (let line of data) {\n        line = line.trim().replace(/#.*/, \"\");\n        if (line == \"\")\n            continue;\n        if (!init_state_section) {\n            if (line == \"!START_INIT_STATE\") {\n                init_state_section = true;\n                continue;\n            }\n            parse_line(line, program);\n        }\n        else {\n            if (line == \"!END_INIT_STATE\") {\n                init_state_section = false;\n                continue;\n            }\n            let val = parse_init_state(line);\n            program.current_state.push(val);\n        }\n    }\n    return program;\n}\nexports.parse_code = parse_code;\n// Import project as a list of files\n// TODO: change false to list of warnings\nfunction parse_import_files(input_files) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!input_files) {\n            //show error\n            console.log(\"No input files\");\n            return false;\n        }\n        class Manifest_File {\n            constructor() {\n                this.data = [];\n                this.imported = false;\n            }\n        }\n        let manifest_maps = new Map();\n        ;\n        for (let file of input_files) {\n            var m = new Manifest_File();\n            m.data = (yield file.text()).split(\"\\n\").map(a => a.trim().replace(/#.*/, ''));\n            manifest_maps.set(file.name, m);\n        }\n        for (let [key, m] of manifest_maps) {\n            for (let s of m.data) {\n                if (s.match(/^!INCLUDE /)) {\n                    //TODO: replace includes\n                }\n            }\n        }\n        let lines = [];\n        for (let [_, m] of manifest_maps) {\n            if (!m.imported)\n                lines.push(...m.data);\n        }\n        return parse_code(lines);\n    });\n}\nexports.parse_import_files = parse_import_files;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Colour = exports.Colour_Map = exports.Transition_Rule = exports.Species_Matcher = void 0;\nconst Species_Matcher_1 = __importDefault(require(\"./Species_Matcher\"));\nexports.Species_Matcher = Species_Matcher_1.default;\nconst Transition_Rule_1 = __importDefault(require(\"./Transition_Rule\"));\nexports.Transition_Rule = Transition_Rule_1.default;\nconst Colour_Map_1 = __importDefault(require(\"./Colour_Map\"));\nexports.Colour_Map = Colour_Map_1.default;\nconst Colour_1 = __importDefault(require(\"./Colour\"));\nexports.Colour = Colour_1.default;\nconst Parser_1 = require(\"./Parser\");\nclass Surface_CRN {\n    constructor(p = {}) {\n        this.current_state = [];\n        this.rules = [];\n        this.colour_map = new Colour_Map_1.default();\n        this.options = new Map();\n        this.grid_type = 'square';\n        Object.assign(this, p);\n    }\n}\nexports.default = Surface_CRN;\nSurface_CRN.parser = { parse_import_files: Parser_1.parse_import_files, parse_code: Parser_1.parse_code };\n"],"sourceRoot":""}