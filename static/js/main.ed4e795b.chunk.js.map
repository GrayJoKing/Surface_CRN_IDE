{"version":3,"sources":["components/HeaderComponent.tsx","components/PointClass.tsx","components/Grid_StateComponent.tsx","components/TransitionRulesComponent.tsx","components/ColourMappingComponent.tsx","components/ImportExportComponent.tsx","components/ModelStatsComponent.tsx","SurfaceCRNapp.tsx","index.tsx","../../surface_crn/Species_Matcher.js","../../surface_crn/Transition_Rule.js","../../surface_crn/Colour.js","../../surface_crn/Surface_CRN.js","../../surface_crn/Colour_Map.js","../../surface_crn/Transition_State.js","../../surface_crn/Parser.js"],"names":["HeaderComponent","p","state","simPlaying","className","size","onClick","this","props","stopPressed","fastBackwardPressed","stepBackPressed","playPressed","stepForwardPressed","fastForwardPressed","React","Component","Point","x","y","s","origin","CRN_GridComponent","onAutofill","selectRange","fillRange","data","repeatSelectionIntoFill","columns","autofillCell","setState","onCellDataChanged","event","update_state","rowIndex","colIndex","newData","current_state","colour_map","geometry","createCols","createData","offset","rowHeight","shouldAllowAutofill","_","context","destCellDef","srcCellDef","colNum","length","push","fieldName","width","i","toString","row","j","getText","renderBackground","cellBounds","cell","metadata","colour","find_colour","new_colour","Colour","add_temp","fillStyle","rgb","join","fillRect","left","top","height","renderText","text","cellHasTextFunction","console","log","r","g","b","fillText","editor","serialise","deserialise","prev","trim","match","TransitionRulesComponent","rules_list","model","rules","id","map","rule","deleteRule","addRule","RuleRowComponent","reactant0","reactants","original_string","reactant1","is_mono","product0","products","product1","rate","value","type","onChange","updateRule","bind","min","step","e","newVal","currentTarget","target","Species_Matcher","update","ColourMappingComponent","colours","values","v","refreshColour","name","addColour","style","cursor","ColourRowComponent","pickerRef","mouseDownInElement","hex","isOpen","species","showList","handleClickOutside","contains","document","addEventListener","handleDownClick","removeEventListener","backgroundColor","ref","elem","color","updateColour","a","updateSpecies","deleteMatcher","addMatcher","update_colour","hex2rgb","update_matched","add_matcher","m","delete_matcher","ImportExportComponent","example_selected","options","label","isSearchable","isClearable","newValue","actionMeta","styles","option","provided","disabled","import_example","multiple","import_code","export_code","ModelStatsComponent","sim_time","position","bottom","zoomIn","zoomOut","float","toFixed","SurfaceCRNapp","initial_state_component","transition_state_component","colour_map_component","simulator_component","header_component","model_stats_component","model_tabs","playing_simulation","Surface_CRN","initial_state","Array","from","stepBackwardPressed","forceRenderTabPanel","onSelect","onTabSelect","updateInitState","pixels_per_node","updateSimState","deleteColour","files","getElementById","parser","parse_import_files","new_model","update_page","export","blob","Blob","anchor","createElement","download","href","window","webkitURL","URL","createObjectURL","dataset","downloadurl","click","file","fetch","headers","then","response","parse_code","split","sim_playing","setPlaying","selectedIndex","update_init_state","init_state","updateColsAndData","refreshInitState","refreshSimState","start_sim","sim_started","startSimulation","index","lastIndex","showSimulation","playSimulation","started","next_frame","setTimeout","fps","step_forward","step_backward","prev_frame","stop_sim","c","add","Object","assign","delete","remove_rule","add_rule","increase_size","decrease_size","ReactDOM","render","StrictMode","defineProperty","exports","init","matched","decompose_matcher","flat","matchAll","default","__importDefault","mod","__esModule","Species_Matcher_1","require","Transition_Rule","decomposed","undefined","includes","red","green","blue","Set","slice","replace","parseInt","Colour_Map","Transition_Rule_1","Colour_Map_1","Colour_1","Transition_State_1","Parser_1","ts_priority_queue_1","random_1","Map","rng_seed","speedup_factor","last_updated","sim_queue","sim_history","rule_check_cache","splice","indexOf","blankRule","key","set","output","k","clear_temp","clone","comparator","execution_time","initial_changes","forEach","fill","find_next_transitions","t","initialValues","peek","new_cells","every","update_time","dequeue","time","get_next_transition","run_upto","run_backto","new_transitions","ignore","newT","tr","queue","pop","old_cells","current_cell","possible_transitions","rs","z","matches","Math","add_old_cell","add_new_cell","neighbour_offsets","xd","yd","has","other_cell","example_colours","temp_colours","some","s1","get","find","clear","Transition_State","old_val","new_val","Surface_CRN_1","parse_line","line","program","start","end","parse_rule","name_colour","vars","sp","parse_colour","parse_option","val","set_option","parse_init_state","init_state_section","input_files","Manifest_File","imported","manifest_maps","lines"],"mappings":"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","file":"static/js/main.ed4e795b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaPlay, FaPause, FaStop, FaStepBackward, FaStepForward, FaFastBackward, FaFastForward} from 'react-icons/fa';\r\n\r\ninterface HeaderProps {\r\n\tplayPressed : (_ : any) => void\r\n\tstepBackPressed : (_ : any) => void\r\n\tstepForwardPressed : (_ : any) => void\r\n\tfastBackwardPressed : (_ : any) => void\r\n\tfastForwardPressed : (_ : any) => void\r\n\tstopPressed : (_ : any) => void\r\n}\r\n\r\ninterface HeaderState {\r\n\tsimPlaying : boolean\r\n}\r\n\r\nexport default class HeaderComponent extends React.Component<HeaderProps, HeaderState> {\r\n\t\r\n\tconstructor(p : HeaderProps) {\r\n\t\tsuper(p);\r\n\t\tthis.state = {simPlaying : false};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn <header className=\"grid\">\r\n\t\t\t<nav className=\"grid\">\r\n\t\t\t\t<h2 className=\"grid title\">\r\n\t\t\t\t\tSurface CRN Simulator\r\n\t\t\t\t</h2>\r\n\t\t\t\t<h4 className=\"grid simulator_options\">\r\n\t\t\t\t</h4>\r\n\t\t\t\t<h4 className=\"simulator_controls\">\r\n\t\t\t\t\t<FaStop size={25} onClick={this.props.stopPressed}/>\r\n\t\t\t\t\t<FaFastBackward size={25} onClick={this.props.fastBackwardPressed}/>\r\n\t\t\t\t\t<FaStepBackward size={25} onClick={this.props.stepBackPressed}/>\r\n\t\t\t\t\t{this.state.simPlaying\r\n\t\t\t\t\t\t? <FaPause size={25} onClick={this.props.playPressed}/>\r\n\t\t\t\t\t\t: <FaPlay size={25} onClick={this.props.playPressed}/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<FaStepForward size={25} onClick={this.props.stepForwardPressed}/>\r\n\t\t\t\t\t<FaFastForward size={25} onClick={this.props.fastForwardPressed}/>\r\n\t\t\t\t</h4>\r\n\t\t\t</nav>\r\n\t\t</header>;\r\n\t}\r\n}","\r\nclass Point {\r\n\tx: number;\r\n\ty: number;\r\n\t\r\n\tstatic origin : Point = new Point(0,0);\r\n\t\r\n\tconstructor(x : number,y : number) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\t\r\n\tadd(p : Point) { return new Point(this.x + p.x, this.y + p.y) };\r\n\tsubtract(p : Point) { return new Point(this.x - p.x, this.y - p.y) };\r\n\tscale(s : number) { return new Point(this.x * s, this.y * s) };\r\n};\r\n\r\nexport default Point;","import React from 'react';\r\nimport Surface_CRN, {Species_Matcher, Transition_Rule, Colour_Map, Colour} from 'surface_crn';\r\nimport Point from './PointClass';\r\n\r\nimport {ReactCanvasGrid, ColumnDef, DataRow, CellDef, CustomDrawCallbackMetadata, CellDataChangeEvent, cellHasTextFunction, SelectRange, repeatSelectionIntoFill, AutofillContext} from 'react-canvas-grid';\r\n\r\ninterface CRN_GridProps {\r\n\tcurrent_state : string[][]\r\n\tcolour_map : Colour_Map\r\n\tgeometry : 'square'|'hex'\r\n\tupdate_state : (x : number, y : number, s : string) => void\r\n\tsize : number\r\n}\r\n\r\ninterface CRN_GridState extends React.ComponentState {\r\n\tcolumns : ColumnDef[]\r\n\tdata: Array<DataRow<string | null>>\r\n\tcolour_map : Colour_Map\r\n\tgeometry : 'square'|'hex'\r\n\toffset : Point\r\n\tsize : number\r\n}\r\n\r\nclass CRN_GridComponent extends React.Component<CRN_GridProps, CRN_GridState> {\r\n\t\r\n\tconstructor(props : CRN_GridProps) {\r\n\t\tsuper(props);\r\n\t\tlet {current_state, colour_map, geometry} = props;\r\n\t\tthis.state = {\r\n\t\t\tcolumns : this.createCols(current_state, props.size),\r\n\t\t\tdata : this.createData(current_state),\r\n\t\t\tcolour_map : colour_map,\r\n\t\t\tgeometry : geometry,\r\n\t\t\toffset : Point.origin,\r\n\t\t\tsize : props.size,\r\n\t\t};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t//console.log('rendAll');\r\n\t\t// TODO: figure out where to clear the temp colours\r\n\t\t//this.state.colour_map.clear_temp();\r\n\t\t// TODO: render \"Initial State\" and other information over canvas\r\n\t\treturn <ReactCanvasGrid<string | null>\r\n\t\t\t\t\tcolumns={this.state.columns}\r\n\t\t\t\t\tdata={this.state.data}\r\n\t\t\t\t\trowHeight={this.state.size}\r\n\t\t\t\t\tonCellDataChanged={this.onCellDataChanged}\r\n\t\t\t\t\tshouldAllowAutofill={_ => true}\r\n\t\t\t\t\tonAutofill={this.onAutofill}\r\n\t\t\t\t/>\r\n\t}\r\n\t\r\n\tprivate onAutofill = (selectRange: SelectRange, fillRange: SelectRange) => {\r\n\t\tconst data = repeatSelectionIntoFill(\r\n\t\t\tselectRange,\r\n\t\t\tfillRange,\r\n\t\t\tthis.state.data,\r\n\t\t\tthis.state.columns,\r\n\t\t\tthis.autofillCell,\r\n\t\t);\r\n\t\tthis.setState({data});\r\n\t}\r\n\t\r\n\tprivate autofillCell(context: AutofillContext<string | null>): CellDef<string | null> {\r\n\t\treturn {\r\n\t\t\t...context.destCellDef,\r\n\t\t\tdata: context.srcCellDef.data,\r\n\t\t};\r\n\t}\r\n\t\r\n\tpublic updateColsAndData(current_state : string[][]) {\r\n\t\tthis.setState({columns: this.createCols(current_state), data: this.createData(current_state)});\r\n\t}\r\n\t\r\n\tprivate createCols(current_state : string[][], size? : number) {\r\n\t\tlet columns = [];\r\n\t\tlet colNum = 0;\r\n\t\tif (current_state.length !== 0) {\r\n\t\t\tcolNum = current_state[0].length;\r\n\t\t}\r\n\t\tcolumns.push({fieldName : 'addLeftCol', width: size || this.state.size});\r\n\t\tfor (let i = 0; i < colNum; i++) columns.push({fieldName : i.toString(), width: size || this.state.size});\r\n\t\tcolumns.push({fieldName : 'addRightCol', width: size || this.state.size});\r\n\t\t\r\n\t\treturn columns;\r\n\t}\r\n\t\r\n\tprivate createData(current_state : string[][]) {\r\n\t\tlet data : Array<DataRow<string | null>> = [];\r\n\t\tfor (let i = -1; i <= current_state.length; i++) {\r\n\t\t\tlet row : DataRow<string | null> = {};\r\n\t\t\tif (i !== -1 && i !== current_state.length) {\r\n\t\t\t\tfor (let j = 0; j < current_state[0].length; j++) {\r\n\t\t\t\t\trow[j.toString()] = {\r\n\t\t\t\t\t\tdata: current_state[i][j],\r\n\t\t\t\t\t\tgetText: (x : string|null) => x ? x : '',\r\n\t\t\t\t\t\trenderBackground: (context : CanvasRenderingContext2D, cellBounds : ClientRect, cell : CellDef<string | null>, metadata : CustomDrawCallbackMetadata) => {\r\n\t\t\t\t\t\t\tif (cell.data !== null) {\r\n\t\t\t\t\t\t\t\tlet colour = this.state.colour_map.find_colour(cell.data);\r\n\t\t\t\t\t\t\t\tif (colour == null) {\r\n\t\t\t\t\t\t\t\t\tlet s : string = this.state.colour_map.new_colour();\r\n\t\t\t\t\t\t\t\t\tcolour = new Colour(s);\r\n\t\t\t\t\t\t\t\t\tthis.state.colour_map.add_temp(cell.data!, colour);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcontext.fillStyle = 'rgb(' + colour.rgb().join(',') + ')';\r\n\t\t\t\t\t\t\t\tcontext.fillRect(cellBounds.left, cellBounds.top, cellBounds.width, cellBounds.height);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\trenderText : (context: CanvasRenderingContext2D, cellBounds: ClientRect, cell: CellDef<string | null>) => {\r\n\t\t\t\t\t\t\tif (this.state.size >= 10) {\r\n\t\t\t\t\t\t\t\tconst text = cellHasTextFunction(cell) ? cell.getText(cell.data) : cell.text;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (text) {\r\n\t\t\t\t\t\t\t\t\tlet colour : Colour | null = this.state.colour_map.find_colour(cell.data!);\r\n\t\t\t\t\t\t\t\t\tif (colour == null) {\r\n\t\t\t\t\t\t\t\t\t\tlet s : string = this.state.colour_map.new_colour();\r\n\t\t\t\t\t\t\t\t\t\tcolour = new Colour(s);\r\n\t\t\t\t\t\t\t\t\t\tthis.state.colour_map.add_temp(cell.data!, colour);\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(cell.data, colour)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlet [r,g,b] = colour.rgb();\r\n\t\t\t\t\t\t\t\t\tcontext.fillStyle = (r * 0.299 + g * 0.587 + b * 0.114) > 186 ? 'black' : 'white';\r\n\t\t\t\t\t\t\t\t\tcontext.fillText(text,cellBounds.left + 2,cellBounds.top + 10, cellBounds.width - 4);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\teditor: {\r\n\t\t\t\t\t\t\tserialise: (x : string|null) => x ? x : '',\r\n\t\t\t\t\t\t\tdeserialise: (text: string, prev : string|null) => {\r\n\t\t\t\t\t\t\t\ttext = text.trim();\r\n\t\t\t\t\t\t\t\tif (text.match(/^\\w+$/)) {\r\n\t\t\t\t\t\t\t\t\treturn text;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn prev;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (current_state.length != 0) {\r\n\t\t\t\t\tfor (let j = 0; j < current_state[0].length; j++) {\r\n\t\t\t\t\t\trow[j.toString()] = {data: null, text : '', renderBackground : () => 1};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trow['addLeftCol'] = {data: null, text : '', renderBackground : () => 1};\r\n\t\t\trow['addRightCol'] = {data: null, text : '', renderBackground : () => 1};\r\n\t\t\tdata.push(row);\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\t\r\n\tprivate onCellDataChanged = (event: CellDataChangeEvent<string | null>) => {\r\n\t\tthis.props.update_state(event.rowIndex-1, event.colIndex-1, event.newData!);\r\n\t}\r\n}\r\n\r\nexport default CRN_GridComponent","import React from 'react';\r\nimport { FaTrash, FaPlus, FaArrowRight } from 'react-icons/fa';\r\n\r\nimport SurfaceCRN, {Species_Matcher, Transition_Rule, Colour_Map, Colour} from 'surface_crn';\r\n\r\ninterface TransitionRulesProps {\r\n\tmodel : SurfaceCRN\r\n\taddRule : () => void\r\n\tdeleteRule : (r : Transition_Rule) => void\r\n}\r\n\r\nexport default class TransitionRulesComponent extends React.Component<TransitionRulesProps, {rules_list : Transition_Rule[]}> {\r\n\r\n\tconstructor(props : TransitionRulesProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {rules_list : props.model.rules};\r\n\t}\r\n\r\n\trender() {\r\n\t\t// TODO: figure out better way of unique indexing\r\n\t\t\r\n\t\treturn <div className=\"grid panel rules_panel\">\r\n\t\t\t<h3 className=\"panel_header\"> Transition Rules </h3>\r\n\t\t\t\r\n\t\t\t<div id=\"rule_container\">\r\n\t\t\t\t{this.state.rules_list.map((r : Transition_Rule, i : number) => <RuleRowComponent key={r.toString() + i.toString()} rule={r} deleteRule={() => this.props.deleteRule(r)} />)}\r\n\t\t\t\t<div onClick={this.props.addRule}> Add Rule </div>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\ninterface RuleRowState {\r\n\treactant0 : string,\r\n\treactant1 : string,\r\n\tproduct0 : string,\r\n\tproduct1 : string,\r\n\trate : number,\r\n}\r\n// TODO: Handle mono transitions properly (in here and in model)\r\nclass RuleRowComponent extends React.Component<{rule: Transition_Rule, deleteRule : React.MouseEventHandler<Element>}, RuleRowState> {\r\n\trule : Transition_Rule;\r\n\tdeleteRule : React.MouseEventHandler<Element>;\r\n\t\r\n\tconstructor(props : {rule : Transition_Rule, deleteRule : React.MouseEventHandler<Element>}) {\r\n\t\tsuper(props);\r\n\t\tthis.rule = props.rule;\r\n\t\tthis.state = {\r\n\t\t\treactant0 : props.rule.reactants[0].original_string,\r\n\t\t\treactant1 : !props.rule.is_mono && props.rule.reactants.length > 1 ? props.rule.reactants[1].original_string : '',\r\n\t\t\tproduct0 : props.rule.products[0].original_string,\r\n\t\t\tproduct1 : !props.rule.is_mono && props.rule.products.length > 1 ? props.rule.products[1].original_string : '',\r\n\t\t\trate : props.rule.rate,\r\n\t\t}\r\n\t\tthis.deleteRule = props.deleteRule;\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t// TODO: gray out mono'd rules\r\n\t\t\r\n\t\treturn <div className=\"rulesRow grid\">\r\n\t\t\t<div> <input value={this.state.rate} type=\"number\" className=\"rulesRate\" onChange={this.updateRule.bind(this)} min=\"0\" step=\"0.1\"/> </div>\r\n\t\t\t<div> <input value={this.state.reactant0} className=\"rulesReactant0\" onChange={this.updateRule.bind(this)}/> </div>\r\n\t\t\t<div> <FaPlus /> </div>\r\n\t\t\t<div> <input value={this.state.reactant1} className=\"rulesReactant1\" onChange={this.updateRule.bind(this)}/> </div>\r\n\t\t\t<div> <FaArrowRight /> </div>\r\n\t\t\t<div> <input value={this.state.product0} className=\"rulesProduct0\" onChange={this.updateRule.bind(this)}/> </div>\r\n\t\t\t<div> <FaPlus /> </div>\r\n\t\t\t<div> <input value={this.state.product1} className=\"rulesProduct1\" onChange={this.updateRule.bind(this)}/> </div>\r\n\t\t\t<FaTrash onClick={this.deleteRule} />\r\n\t\t</div>;\r\n\t}\r\n\t\r\n\tupdateRule(e : React.ChangeEvent<HTMLInputElement>) {\r\n\t\tlet reactants = this.rule.reactants;\r\n\t\tlet products = this.rule.products;\r\n\t\tlet newVal : string = e.currentTarget.value;\r\n\t\tswitch (e.target.className) {\r\n\t\t\tcase \"rulesReactant0\":\r\n\t\t\t\treactants[0] = new Species_Matcher(newVal);\r\n\t\t\t\tthis.rule.update({reactants : reactants});\r\n\t\t\t\tthis.setState({reactant0 : newVal});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rulesReactant1\":\r\n\t\t\t\treactants[1] = new Species_Matcher(newVal);\r\n\t\t\t\tthis.rule.update({reactants : reactants});\r\n\t\t\t\tthis.setState({reactant1 : newVal});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rulesProduct0\":\r\n\t\t\t\tproducts[0] = new Species_Matcher(newVal);\r\n\t\t\t\tthis.rule.update({products : products});\r\n\t\t\t\tthis.setState({product0 : newVal});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rulesProduct1\":\r\n\t\t\t\tproducts[1] = new Species_Matcher(newVal);\r\n\t\t\t\tthis.rule.update({products : products});\r\n\t\t\t\tthis.setState({product1 : newVal});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rulesRate\":\r\n\t\t\t\tproducts[1] = new Species_Matcher(newVal);\r\n\t\t\t\tthis.rule.update({rate : +newVal});\r\n\t\t\t\tthis.setState({rate : +newVal});\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}","import React from 'react';\r\nimport SurfaceCRN, {Colour_Map, Colour, Species_Matcher} from 'surface_crn';\r\nimport { HexColorPicker } from \"react-colorful\";\r\nimport { FaAngleRight, FaTrash } from \"react-icons/fa\";\r\n\r\ninterface ColourMappingProps {\r\n\tmodel : SurfaceCRN\r\n\trefreshColour : () => void\r\n\taddColour : () => void\r\n\tdeleteColour : (c : Colour) => void\r\n}\r\n\r\nexport default class ColourMappingComponent extends React.Component<ColourMappingProps, {colours : Set<Colour>}> {\r\n\t\r\n\tconstructor(props : ColourMappingProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {colours : this.props.model.colour_map.colours};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn <div className=\"grid panel colour_panel\">\r\n\t\t\t<h3> Colour Mapping </h3>\r\n\t\t\t\r\n\t\t\t<div id=\"colour_container\">\r\n\t\t\t\t{[...this.state.colours.values()].map(v =>\r\n\t\t\t\t\t<ColourRowComponent colour={v} key={v.name} onChange={this.props.refreshColour}/>\r\n\t\t\t\t)}\r\n\t\t\t\t<div onClick={this.props.addColour.bind(this)} style={{cursor: \"pointer\"}}> Add Colour </div>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\ninterface ColourRowState {\r\n\tcolour : string\r\n\tisOpen : boolean\r\n\tspecies : Set<Species_Matcher>\r\n\tname : string\r\n\tshowList : boolean\r\n}\r\n\r\ninterface ColourRowProps {\r\n\tcolour : Colour\r\n\tonChange : () => void\r\n}\r\n\r\nclass ColourRowComponent extends React.Component<ColourRowProps,ColourRowState> {\r\n\tpickerRef : HTMLDivElement | null = null;\r\n\tmouseDownInElement : boolean = false;\r\n\t\r\n\tconstructor(p : ColourRowProps) {\r\n\t\tsuper(p);\r\n\t\tthis.state = {colour : p.colour.hex(), isOpen : false, species : p.colour.species, name: p.colour.name, showList : false};\r\n\r\n\t\tthis.handleClickOutside = this.handleClickOutside.bind(this);\r\n\t}\r\n\t\r\n\thandleClickOutside(event : MouseEvent) {\r\n\t\t// TODO:  fix click on swatch to close picker\r\n\t\tif (!this.mouseDownInElement && this.pickerRef && !this.pickerRef.contains(event.target as Node)) {\r\n\t\t\tthis.setState({isOpen : false});\r\n\t\t}\r\n\t}\r\n\t\r\n\thandleDownClick(event : MouseEvent) {\r\n\t\tthis.mouseDownInElement = (!this.pickerRef || this.pickerRef.contains(event.target as Node));\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tdocument.addEventListener('mousedown', this.handleDownClick.bind(this));\r\n\t\tdocument.addEventListener('mouseup', this.handleClickOutside.bind(this));\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tdocument.removeEventListener('mousedown', this.handleDownClick);\r\n\t\tdocument.removeEventListener('mouseup', this.handleClickOutside);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t// TODO: disallow invalid chars in name\r\n\t\t// TODO: make swatch more integrated (background colour of text? left tab thing)\r\n\t\treturn <div>\r\n\t\t\t<div className=\"picker\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"swatch\"\r\n\t\t\t\t\tstyle={{ backgroundColor: this.props.colour.hex() }}\r\n\t\t\t\t\tonClick={() => !this.state.isOpen && this.setState({isOpen : !this.state.isOpen})}\r\n\t\t\t\t/>\r\n\t\t\t\t<input value={this.state.name} onChange={(e) => {let s = e.currentTarget.value; this.setState({name : s}); this.props.colour.name = s}} />\r\n\t\t\t\t<FaAngleRight size={25} style={{cursor : 'pointer'}} onClick={(_) => {this.setState({showList : !this.state.showList})}} />\r\n\t\t\t</div>\r\n\t\t\t{this.state.isOpen && (\r\n\t\t\t\t<div className=\"popover\" ref={(elem) => this.pickerRef = elem} >\r\n\t\t\t\t<HexColorPicker color={this.props.colour.hex()} onChange={(s) => {this.setState({colour : s}); this.updateColour(s)}}/>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{this.state.showList && \r\n\t\t\t\t<div className=\"flexBox\">\r\n\t\t\t\t\t{[...this.state.species.values()].map((a : Species_Matcher) => <div> <input value={a.original_string} className=\"\" onChange={this.updateSpecies(a).bind(this)}/> <FaTrash onClick={() => this.deleteMatcher(a)} /></div>)}\r\n\t\t\t\t\t<div style = {{cursor : \"pointer\"}} onClick = {this.addMatcher.bind(this)}> Add Species </div>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>;\r\n\t}\r\n\t\r\n\tupdateColour(s : string) {\r\n\t\tthis.props.colour.update_colour(Colour.hex2rgb(s));\r\n\t\tthis.props.onChange();\r\n\t}\r\n\t\r\n\tupdateSpecies(a : Species_Matcher) {\r\n\t\treturn (e : React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t\ta.update_matched(e.target.value);\r\n\t\t\tthis.setState({species : this.props.colour.species});\r\n\t\t\tthis.props.onChange();\r\n\t\t}\r\n\t}\r\n\t\r\n\taddMatcher() {\r\n\t\tthis.props.colour.add_matcher(\"\");\r\n\t\tthis.setState({species : this.props.colour.species});\r\n\t}\r\n\tdeleteMatcher(m : Species_Matcher) {\r\n\t\tthis.props.colour.delete_matcher(m);\r\n\t\tthis.setState({species : this.props.colour.species});\r\n\t}\r\n}","import React from 'react';\r\nimport Select, {SingleValue, ActionMeta} from 'react-select'\r\n\r\ninterface ImportProps {\r\n\timport_code : () => Promise<void>\r\n\texport_code : () => void\r\n\timport_example : (s : string | null) => void\r\n}\r\n\r\ninterface ImportState {\r\n\texample_selected : string | null\r\n}\r\n\r\nexport class ImportExportComponent extends React.Component<ImportProps, ImportState> {\r\n\t\r\n\tpublic constructor(props: ImportProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {example_selected : \"\"}\r\n\t}\r\n\t\r\n\t\r\n\trender () {\r\n\t\tconst example_files = [\r\n\t\t\t{ value: './examples/two-bit-adder.txt', label: 'Two Bit Adder' },\r\n\t\t\t{ value: './examples/alternate_line_builder.txt', label: 'Line Builder' },\r\n\t\t\t{ value: './examples/Brusselator.txt', label: 'Brusselator' },\r\n\t\t\t{ value: './examples/busy_beaver.txt', label: 'Busy Beaver' },\r\n\t\t\t{ value: './examples/ertl.txt', label: 'Ertl Oscillator' },\r\n\t\t\t{ value: './examples/game_of_life_5x5_circuit.txt', label: 'GoL Five by Five' },\r\n\t\t\t{ value: './examples/game_of_life_one_to_one.txt', label: 'GoL One to One' },\r\n\t\t\t{ value: './examples/GH_big_spiral.txt', label: 'Greenberg-Hastings Big spiral' },\r\n\t\t\t{ value: './examples/majority_asynchronous.txt', label: 'Majority Asynchronous' },\r\n\t\t\t{ value: './examples/molecular_walker.txt', label: 'Molecular Walker' },\r\n\t\t\t{ value: './examples/parens_matcher.txt', label: 'Parens Matcher' },\r\n\t\t\t{ value: './examples/sierpinski_1D_synch.txt', label: '1D Sierpinski' },\r\n\t\t\t{ value: './examples/smarter_scout_ant.txt', label: 'Smarter Scout Ant' }\r\n\t\t]\r\n\t\t\r\n\t\treturn <div className=\"grid panel import_export_panel\">\r\n\t\t\t\t<h3> Import/Export </h3>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Select options={example_files} isSearchable={true} isClearable={true} onChange={(newValue: SingleValue<{ value: string; label: string; }>, actionMeta: ActionMeta<{ value: string; label: string; }>) => this.setState({example_selected : newValue && newValue.value})} styles={{option : (provided, state) => ({...provided, color: 'black'})}} />\r\n\t\t\t\t\t<button disabled={this.state.example_selected === \"\"} type=\"submit\" id=\"import_example\" onClick={() => this.props.import_example(this.state.example_selected)}> Import Example </button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"file\" id=\"import_input\" multiple />\r\n\t\t\t\t\t<button type=\"submit\" id=\"import_submit\" onClick={this.props.import_code}> Import </button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button id=\"export\" onClick={this.props.export_code}> Export </button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport default ImportExportComponent;","import React from 'react';\r\nimport SurfaceCRN, {Species_Matcher, Transition_Rule, Colour_Map, Colour} from 'surface_crn';\r\nimport {FaPlus, FaMinus} from 'react-icons/fa';\r\n\r\ninterface ModelStatsProps {\r\n\tmodel : SurfaceCRN\r\n\tsim_time : number\r\n\tzoomOut : () => void\r\n\tzoomIn : () => void\r\n}\r\n\r\ninterface ModelStatsState {\r\n\tsim_time : number\r\n}\r\n\r\nexport default class ModelStatsComponent extends React.Component<ModelStatsProps, ModelStatsState> {\r\n\t\r\n\tconstructor(p : ModelStatsProps) {\r\n\t\tsuper(p);\r\n\t\tthis.state = {sim_time : 0};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t\r\n\t\treturn <div style={{position: \"absolute\", bottom: 0}}>\r\n\t\t\t\t<FaMinus onClick={this.props.zoomIn}/>\r\n\t\t\t\t<FaPlus  onClick={this.props.zoomOut}/>\r\n\t\t\t\t\r\n\t\t\t\t<div style={{float: \"right\"}}> {this.state.sim_time.toFixed(2)} </div>\r\n\t\t</div>\r\n\t}\r\n\r\n}","import React from 'react';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport Surface_CRN, {Colour_Map, Transition_Rule, Colour} from 'surface_crn';\r\nimport './index.css';\r\nimport HeaderComponent from './components/HeaderComponent';\r\nimport CRN_GridComponent from './components/Grid_StateComponent';\r\nimport TransitionRulesComponent from './components/TransitionRulesComponent';\r\nimport ColourMappingComponent from './components/ColourMappingComponent';\r\nimport ImportExportComponent from './components/ImportExportComponent';\r\nimport ModelStatsComponent from './components/ModelStatsComponent';\r\n\r\ninterface SurfaceCRNappState {\r\n\tmodel : Surface_CRN\r\n\tplaying_simulation : boolean\r\n\tsim_time : number\r\n}\r\n\r\nexport default class SurfaceCRNapp extends React.Component<{}, SurfaceCRNappState> {\r\n\t\r\n\tinitial_state_component : CRN_GridComponent | null = null;\r\n\ttransition_state_component : TransitionRulesComponent | null = null;\r\n\tcolour_map_component : ColourMappingComponent | null = null;\r\n\tsimulator_component : CRN_GridComponent | null = null;\r\n\theader_component : HeaderComponent | null = null;\r\n\tmodel_stats_component : ModelStatsComponent | null = null;\r\n\t\r\n\tmodel_tabs : Tabs | null = null;\r\n\tplaying_simulation : boolean = false;\r\n\r\n\tconstructor(_ : {}) {\r\n\t\tsuper(_);\r\n\t\tthis.state = {model : new Surface_CRN({initial_state : Array.from({length:5}, () => (Array.from({length:5}, () => 'I')))}), playing_simulation : false, sim_time : 0};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div className=\"main_grid grid\">\r\n\t\t\t\t<HeaderComponent playPressed={this.playPressed.bind(this)} stepBackPressed={this.stepBackwardPressed.bind(this)} stepForwardPressed={this.stepForwardPressed.bind(this)} fastBackwardPressed={this.fastBackwardPressed.bind(this)} fastForwardPressed={this.fastForwardPressed.bind(this)} stopPressed={this.stopPressed.bind(this)} ref={elem => this.header_component = elem}/>\r\n\t\t\t\t<Tabs className=\"panel state_panel\" ref={elem => this.model_tabs = elem} forceRenderTabPanel={true} onSelect={this.onTabSelect.bind(this)}>\r\n\t\t\t\t\t<TabList>\r\n\t\t\t\t\t\t<Tab>Initial State</Tab>\r\n\t\t\t\t\t\t<Tab>Simulator</Tab>\r\n\t\t\t\t\t</TabList>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<TabPanel style={{height:\"100%\"}}>\r\n\t\t\t\t\t\t<CRN_GridComponent current_state={this.state.model.initial_state} colour_map={this.state.model.colour_map} geometry={this.state.model.geometry} ref={elem => this.initial_state_component = elem} update_state={this.updateInitState.bind(this)} size={this.state.model.pixels_per_node}/>\r\n\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t<TabPanel style={{height:\"100%\", position:\"relative\"}}>\r\n\t\t\t\t\t\t<div style={{height:\"90%\"}}>\r\n\t\t\t\t\t\t\t<CRN_GridComponent current_state={this.state.model.current_state} colour_map={this.state.model.colour_map} geometry={this.state.model.geometry} ref={elem => this.simulator_component = elem} update_state={this.updateSimState.bind(this)} size={this.state.model.pixels_per_node}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<ModelStatsComponent model={this.state.model} sim_time={this.state.sim_time} ref={elem => this.model_stats_component = elem} zoomIn={this.zoomIn.bind(this)} zoomOut={this.zoomOut.bind(this)}/>\r\n\t\t\t\t\t</TabPanel>\r\n\t\t\t\t</Tabs>\r\n\t\t\t\t<ColourMappingComponent ref={elem => this.colour_map_component = elem} model={this.state.model} refreshColour={this.refreshColour.bind(this)} addColour={this.addColour.bind(this)} deleteColour={this.deleteColour.bind(this)}/>\r\n\t\t\t\t<TransitionRulesComponent ref={elem => this.transition_state_component = elem} model={this.state.model} addRule={this.addRule.bind(this)} deleteRule={this.deleteRule}/>\r\n\t\t\t\t<ImportExportComponent export_code={this.export_code.bind(this)} import_code={this.import_code.bind(this)} import_example={this.import_example.bind(this)}/>\r\n\t\t\t</div>\r\n\t}\r\n\r\n\tasync import_code() {\r\n\t\tconst files = (document.getElementById(\"import_input\") as HTMLInputElement).files;\r\n\t\tif (files === null) return;\r\n\t\t\r\n\t\tlet new_model : Surface_CRN|false = await Surface_CRN.parser.parse_import_files([...files]);\r\n\t\t\r\n\t\tif (new_model === false) {\r\n\t\t\t//show errors\r\n\t\t} else {\r\n\t\t\tthis.update_page(new_model);\r\n\t\t}\r\n\t}\r\n\t\r\n\texport_code() {\r\n\t\tlet r = this.state.model.export(),\r\n\t\t\tblob = new Blob([r], { type: 'text/plain' }),\r\n\t\t\tanchor = document.createElement('a');\r\n\t\tanchor.download = \"surface_crn_export.txt\";\r\n\t\tanchor.href = (window.webkitURL || window.URL).createObjectURL(blob);\r\n\t\tanchor.dataset.downloadurl = ['text/plain', anchor.download, anchor.href].join(':');\r\n\t\tanchor.click();\r\n\t}\r\n\t\r\n\timport_example(file : string | null) {\r\n\t\tif (file === null || file === \"\") return;\r\n\r\n\t\tlet r = this;\r\n\t\tfetch(file,\r\n\t\t\t{headers : { \r\n\t\t\t\t'Content-Type': 'application/text',\r\n\t\t\t\t'Accept': 'application/text'\r\n\t\t\t}}\r\n\t\t).then(function(response : Response){\r\n\t\t\treturn response.text();\r\n\t\t}).then(function(s : string) {\r\n\t\t\tlet new_model = Surface_CRN.parser.parse_code(s.split(\"\\n\"));\r\n\t\t\t\r\n\t\t\tr.update_page(new_model);\r\n\t\t});\r\n\t}\r\n\r\n\tsetPlaying(sim_playing : boolean) {\r\n\t\tthis.playing_simulation = sim_playing;\r\n\t\tthis.header_component!.setState({simPlaying : sim_playing});\r\n\t\t\r\n\t}\r\n\r\n\tupdate_page(new_model : Surface_CRN) {\r\n\t\tthis.setPlaying(false);\r\n\t\t\r\n\t\tthis.model_tabs!.setState({selectedIndex : 0});\r\n\t\tthis.setState({model : new_model});\r\n\t\tthis.transition_state_component!.setState({rules_list : this.state.model.rules});\r\n\t\tthis.colour_map_component!.setState({colours : this.state.model.colour_map.colours});\r\n\r\n\t\tthis.update_init_state(this.state.model.initial_state, this.state.model.colour_map, this.state.model.geometry);\r\n\t}\r\n\r\n\tupdate_init_state(init_state : string[][], colour_map : Colour_Map, geometry : 'hex'|'square') {\r\n\t\tthis.initial_state_component!.setState({colour_map: colour_map, geometry: geometry, size: this.state.model.pixels_per_node});\r\n\t\tthis.initial_state_component!.updateColsAndData(init_state);\r\n\t}\r\n\t\r\n\trefreshInitState() {\r\n\t\t// TODO: redo this to avoid re-rendering the whole state?\r\n\t\tthis.update_init_state(this.state.model.initial_state, this.state.model.colour_map, this.state.model.geometry);\r\n\t\tthis.initial_state_component!.setState({size: this.state.model.pixels_per_node});\r\n\t}\r\n\t\r\n\tupdateInitState(x : number, y : number, s : string) {\r\n\t\tthis.state.model.initial_state[x][y] = s;\r\n\t\tthis.refreshInitState();\r\n\t}\r\n\t\r\n\tupdateSimState(x : number, y : number, s : string) {\r\n\t\tthis.state.model.current_state[x][y] = s;\r\n\t\tthis.refreshSimState();\r\n\t}\r\n\t\r\n\trefreshSimState() {\r\n\t\tthis.model_stats_component!.setState({sim_time : this.state.model.sim_time});\r\n\t\tthis.simulator_component!.setState({colour_map: this.state.model.colour_map});\r\n\t\tthis.simulator_component!.updateColsAndData(this.state.model.current_state);\r\n\t\tthis.simulator_component!.setState({size: this.state.model.pixels_per_node});\r\n\t}\r\n\t\r\n\trefreshColour() {\r\n\t\tthis.refreshInitState();\r\n\t\tthis.refreshSimState();\r\n\t}\r\n\t\r\n\tstartSimulation() {\r\n\t\tthis.state.model.start_sim();\r\n\t\tthis.refreshSimState();\r\n\t\tconsole.log('sim started');\r\n\t}\r\n\t\r\n\tshowSimulation() {\r\n\t\tthis.model_tabs!.setState({selectedIndex : 1});\r\n\t\tif (!this.state.model.sim_started()) {\r\n\t\t\tthis.startSimulation();\r\n\t\t}\r\n\t}\r\n\t\r\n\tonTabSelect(index: number, lastIndex: number, event: Event) {\r\n\t\tif (index !== lastIndex) {\r\n\t\t\tif (index === 1) {\r\n\t\t\t\tthis.startSimulation();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tplayPressed() {\r\n\t\tthis.showSimulation();\r\n\t\tif (this.playing_simulation) {\r\n\t\t\tthis.setPlaying(false);\r\n\t\t} else {\r\n\t\t\tthis.setPlaying(true);\r\n\t\t\tthis.playSimulation(true);\r\n\t\t}\r\n\t}\r\n\t\r\n\tplaySimulation(started? : boolean) {\r\n\t\tif (!started && !this.playing_simulation) return;\r\n\t\tlet b = this.state.model.next_frame();\r\n\t\tthis.refreshSimState();\r\n\t\tif (!b) {\r\n\t\t\tthis.setPlaying(false);\r\n\t\t} else {\r\n\t\t\twindow.setTimeout(this.playSimulation.bind(this), 1/this.state.model.fps)\r\n\t\t}\r\n\t}\r\n\t\r\n\tstepForwardPressed() {\r\n\t\tthis.showSimulation();\r\n\t\tif (!this.state.model.step_forward()) {\r\n\t\t\tconsole.log('sim finished');\r\n\t\t}\r\n\t\tthis.refreshSimState();\r\n\t\tconsole.log('step forward');\r\n\t}\r\n\t\r\n\tstepBackwardPressed() {\r\n\t\tthis.showSimulation();\r\n\t\tif (!this.state.model.step_backward()) {\r\n\t\t\tconsole.log('sim start');\r\n\t\t}\r\n\t\tthis.refreshSimState();\r\n\t\tconsole.log('step backward');\r\n\t}\r\n\t\r\n\tfastForwardPressed() {\r\n\t\tthis.showSimulation();\r\n\t\tif (!this.state.model.next_frame()) {\r\n\t\t\tconsole.log('sim finished');\r\n\t\t}\r\n\t\tthis.refreshSimState();\r\n\t\tconsole.log('step forward');\r\n\t}\r\n\t\r\n\tfastBackwardPressed() {\r\n\t\tthis.showSimulation();\r\n\t\tif (!this.state.model.prev_frame()) {\r\n\t\t\tconsole.log('sim start');\r\n\t\t}\r\n\t\tthis.refreshSimState();\r\n\t\tconsole.log('step backward');\r\n\t}\r\n\t\r\n\tstopPressed() {\r\n\t\tthis.setPlaying(false);\r\n\t\tthis.model_tabs!.setState({selectedIndex : 0});\r\n\t\tthis.state.model.stop_sim();\r\n\t\tthis.refreshSimState();\r\n\t}\r\n\t\r\n\taddColour() {\r\n\t\tlet c : string = this.state.model.colour_map.new_colour();\r\n\t\tthis.state.model.colour_map.add(new Colour(Object.assign(Colour.hex2rgb(c), {\"name\" : \"New\"})));\r\n\t\t\r\n\t\tthis.colour_map_component!.setState({colours : this.state.model.colour_map.colours})\r\n\t}\r\n\t\r\n\tdeleteColour(c : Colour) {\r\n\t\tthis.state.model.colour_map.delete(c);\r\n\t\tthis.colour_map_component!.setState({colours : this.state.model.colour_map.colours})\r\n\t}\r\n\t\r\n\tdeleteRule(r : Transition_Rule) {\r\n\t\tthis.state.model.remove_rule(r);\r\n\t\tthis.transition_state_component!.setState({rules_list : [...this.state.model.rules]});\r\n\t}\r\n\t\r\n\taddRule() {\r\n\t\tthis.state.model.add_rule();\r\n\t\tthis.transition_state_component!.setState({rules_list : [...this.state.model.rules]});\r\n\t}\r\n\t\r\n\tzoomOut() {\r\n\t\tthis.state.model.increase_size();\r\n\t\tthis.refreshSimState();\r\n\t\tthis.refreshInitState();\r\n\t}\r\n\t\r\n\tzoomIn() {\r\n\t\tthis.state.model.decrease_size();\r\n\t\tthis.refreshSimState();\r\n\t\tthis.refreshInitState();\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SurfaceCRNapp from './SurfaceCRNapp';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<title> Surface CRN Simulator </title>\n\t\t<SurfaceCRNapp />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Species_Matcher {\n    constructor(init) {\n        this.original_string = \"\";\n        this.matched = [];\n        this.update_matched(init);\n    }\n    includes(s) {\n        return s === this.original_string;\n        //return this.matched.includes(s);\n    }\n    is_pure() {\n        return this.original_string.match(/^\\w+$/) === null;\n    }\n    toString() {\n        return this.original_string;\n    }\n    update_matched(s) {\n        this.original_string = s;\n        this.matched = this.decompose_matcher(s);\n    }\n    decompose_matcher(s, matches = []) {\n        var r;\n        var x;\n        if (r = s.match(/^(.*)\\[[^[]+\\](.*)$/)) {\n            var rs = r[2].split(r[2].match('|') ? '|' : '');\n            // Check count of ()s are same\n            return rs.map(a => this.decompose_matcher(r[1] + a + r[2])).flat();\n        }\n        else if (x = s.matchAll(/\\{[^}]+\\}/g)) {\n            // Check each contain same amount of ()s\n            // Check all splits are the same size\n            // map over each split and replace with each indexed\n        }\n        else if (r = s.match(/^(.*)\\([^(]+\\)(.*)$/)) {\n            var rs = r[2].split('|');\n            // Check count of ()s are same\n            // Pass contained value onwards (or return it?)\n            return rs.map(a => this.decompose_matcher(r[1] + a + r[2])).flat();\n        }\n        return [s];\n    }\n}\nexports.default = Species_Matcher;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Species_Matcher_1 = __importDefault(require(\"./Species_Matcher\"));\nclass Transition_Rule {\n    constructor(init) {\n        this.is_mono = true;\n        this.reactants = [];\n        this.products = [];\n        this.decomposed = [];\n        this.rate = 1;\n        this.update(init);\n    }\n    toString() {\n        return '(' + this.rate.toString() + ') ' + [this.reactants, this.products].map(x => x.map(a => a.toString()).join(' + ')).join(' -> ');\n    }\n    update(p) {\n        // TODO: add error checking\n        Object.assign(this, p);\n        this.is_mono = this.reactants.length < 2 && this.products.length < 2;\n    }\n    static blankRule() {\n        return new Transition_Rule({ is_mono: true, reactants: [new Species_Matcher_1.default('')], products: [new Species_Matcher_1.default('')] });\n    }\n    matches(x, y) {\n        if (this.is_mono === (y !== undefined))\n            return false;\n        if (this.is_mono) {\n            if (this.reactants[0].includes(x)) {\n                return [this.products[0].original_string];\n            }\n        }\n        else {\n            if (this.reactants[0].includes(x) && this.reactants[1].includes(y)) {\n                return [this.products[0].original_string, this.products[1].original_string];\n            }\n        }\n        return false;\n    }\n}\nexports.default = Transition_Rule;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Species_Matcher_1 = __importDefault(require(\"./Species_Matcher\"));\nclass Colour {\n    constructor(init) {\n        this.red = 0;\n        this.green = 0;\n        this.blue = 0;\n        this.species = new Set();\n        this.name = \"\";\n        if (typeof (init) === 'string') {\n            init = Colour.hex2rgb(init);\n        }\n        this.update_colour(init);\n    }\n    static white() { return new Colour({ red: 256, green: 256, blue: 256 }); }\n    rgb() {\n        return [this.red, this.green, this.blue];\n    }\n    hex() {\n        return '#' + this.rgb().map(a => (\"0\" + a.toString(16)).slice(-2)).join('');\n    }\n    update_colour(c) {\n        Object.assign(this, c);\n    }\n    add_matcher(s) { this.species.add(new Species_Matcher_1.default(s)); }\n    delete_matcher(m) { this.species.delete(m); }\n    static hex2rgb(s) {\n        s = s.replace(/^#/, '');\n        let r = s.match(/^([A-Fa-f\\d]{2})([A-Fa-f\\d]{2})([A-Fa-f\\d]{2})$/);\n        if (r) {\n            return { red: parseInt(r[1], 16), green: parseInt(r[2], 16), blue: parseInt(r[3], 16) };\n        }\n        else {\n            // TODO: setup fail state\n            return { red: 256, green: 256, blue: 256 };\n        }\n    }\n}\nexports.default = Colour;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Colour = exports.Colour_Map = exports.Transition_Rule = exports.Species_Matcher = void 0;\nconst Species_Matcher_1 = __importDefault(require(\"./Species_Matcher\"));\nexports.Species_Matcher = Species_Matcher_1.default;\nconst Transition_Rule_1 = __importDefault(require(\"./Transition_Rule\"));\nexports.Transition_Rule = Transition_Rule_1.default;\nconst Colour_Map_1 = __importDefault(require(\"./Colour_Map\"));\nexports.Colour_Map = Colour_Map_1.default;\nconst Colour_1 = __importDefault(require(\"./Colour\"));\nexports.Colour = Colour_1.default;\nconst Transition_State_1 = __importDefault(require(\"./Transition_State\"));\nconst Parser_1 = require(\"./Parser\");\nconst ts_priority_queue_1 = __importDefault(require(\"ts-priority-queue\"));\nconst random_1 = __importDefault(require(\"random\"));\nclass Surface_CRN {\n    constructor(p = {}) {\n        this.initial_state = [];\n        this.rules = [];\n        this.colour_map = new Colour_Map_1.default();\n        this.options = new Map();\n        this.geometry = 'square';\n        this.rng_seed = null;\n        this.pixels_per_node = 20;\n        this.speedup_factor = 0.5;\n        this.fps = 30;\n        this.current_state = [];\n        this.last_updated = [];\n        this.sim_time = 0;\n        this.sim_queue = null;\n        this.sim_history = [];\n        this.rule_check_cache = {};\n        Object.assign(this, p);\n    }\n    remove_rule(r) {\n        this.rules.splice(this.rules.indexOf(r), 1);\n    }\n    add_rule() {\n        this.rules.push(Transition_Rule_1.default.blankRule());\n    }\n    set_option(key, value) {\n        switch (key) {\n            case \"geometry\":\n                if (value === \"square\" || value === \"hex\") {\n                    this.geometry = value;\n                }\n                else {\n                    throw \"Invalid option: Geometry\";\n                }\n                break;\n            case \"rng_seed\":\n                var i = parseInt(value);\n                this.rng_seed = i;\n                break;\n            case \"pixels_per_node\":\n                var i = parseInt(value);\n                this.pixels_per_node = i;\n                break;\n            case \"speedup_factor\":\n                var i = parseInt(value);\n                this.speedup_factor = i;\n                break;\n            case \"fps\":\n                var i = parseInt(value);\n                this.fps = i;\n                break;\n        }\n        this.options.set(key, value);\n    }\n    export() {\n        let output = [];\n        // Options here\n        for (let [k, v] of this.options) {\n            output.push(k + \" = \" + v);\n        }\n        // Transition rules here\n        output.push(\"!START_TRANSITION_RULES\");\n        output.push(...this.rules.map(a => a.toString()));\n        output.push(\"!END_TRANSITION_RULES\\n\");\n        // Colour mapping\n        output.push([\"!START_COLORMAP\"]);\n        output.push(...this.colour_map.export());\n        output.push([\"!END_COLORMAP\\n\"]);\n        // Initial State\n        output.push([\"!START_INIT_STATE\"]);\n        output.push(...this.initial_state.map(a => a.join(' ')));\n        output.push([\"!END_INIT_STATE\\n\"]);\n        return output.join(\"\\n\");\n    }\n    stop_sim() {\n        this.current_state = [];\n        this.last_updated = [];\n        this.sim_time = 0;\n        this.sim_queue = null;\n        this.sim_history = [];\n        this.rule_check_cache = {};\n        this.colour_map.clear_temp();\n    }\n    start_sim() {\n        this.stop_sim();\n        if (this.rng_seed !== null)\n            random_1.default.clone(this.rng_seed);\n        this.sim_queue = new ts_priority_queue_1.default({ comparator: (a, b) => a.execution_time - b.execution_time });\n        let initial_changes = [];\n        this.initial_state.forEach((s, y) => {\n            this.last_updated.push(Array(s.length).fill(0));\n            this.current_state.push([]);\n            s.forEach((_, x) => {\n                this.current_state[this.current_state.length - 1].push(this.initial_state[y][x]);\n                let r = this.find_next_transitions(x, y);\n                for (let t of r) {\n                    initial_changes.push(t);\n                }\n            });\n        });\n        this.sim_queue = new ts_priority_queue_1.default({ comparator: (a, b) => a.execution_time - b.execution_time, initialValues: initial_changes });\n    }\n    get_next_transition() {\n        if (this.sim_started()) {\n            while (this.sim_queue.length != 0) {\n                let t = this.sim_queue.peek();\n                let b = t.new_cells.every(([x, y, _]) => {\n                    return this.last_updated[y][x] <= t.update_time;\n                });\n                if (b)\n                    break;\n                this.sim_queue.dequeue();\n            }\n            if (this.sim_queue.length == 0)\n                return false;\n            return this.sim_queue.peek();\n        }\n        return false;\n    }\n    run_upto(time) {\n        while (this.sim_time < time) {\n            let t = this.get_next_transition();\n            if (t === false)\n                return false;\n            if (t.execution_time > time)\n                break;\n            this.step_forward();\n        }\n        this.sim_time = time;\n        return true;\n    }\n    run_backto(time) {\n        while (this.sim_time > time) {\n            let t = this.step_backward();\n            if (t === false)\n                return false;\n        }\n        this.sim_time = time;\n        return true;\n    }\n    next_frame() {\n        return this.run_upto(this.sim_time + this.speedup_factor * 1 / this.fps);\n    }\n    prev_frame() {\n        return this.run_backto(this.sim_time - this.speedup_factor * 1 / this.fps);\n    }\n    step_forward() {\n        if (this.sim_started()) {\n            let t = this.get_next_transition();\n            if (t === false)\n                return false;\n            this.sim_queue.dequeue();\n            this.sim_time = t.execution_time;\n            t.new_cells.forEach(([x, y, s]) => {\n                this.current_state[y][x] = s;\n                this.last_updated[y][x] = this.sim_time;\n            });\n            if (t.new_transitions === null) {\n                t.new_transitions = [];\n                let ignore = new Set();\n                t.new_cells.forEach(([x, y, _]) => {\n                    let newT = this.find_next_transitions(x, y, ignore);\n                    for (var tr of newT) {\n                        this.sim_queue.queue(tr);\n                        t && t.new_transitions.push(tr);\n                    }\n                    ignore.add([x, y]);\n                });\n            }\n            else {\n                t.new_transitions.forEach((newT) => {\n                    this.sim_queue.queue(newT);\n                });\n            }\n            this.sim_history.push(t);\n            //console.log(...t.old_cells, '=>', ...t.new_cells);\n            return this.sim_queue.length != 0;\n        }\n        else {\n            return false;\n        }\n    }\n    step_backward() {\n        if (this.sim_started()) {\n            let t = this.sim_history.pop();\n            if (t === undefined)\n                return false;\n            this.sim_time = t.execution_time;\n            t.old_cells.forEach(([x, y, s]) => {\n                this.current_state[y][x] = s;\n                this.last_updated[y][x] = 0;\n            });\n            this.sim_queue.queue(t);\n            return true;\n        }\n        return false;\n    }\n    find_next_transitions(x, y, ignore = new Set()) {\n        let current_cell = this.current_state[y][x];\n        let possible_transitions = [];\n        let rs = [];\n        let z = this.rule_check_cache[current_cell];\n        if (z === undefined) {\n            /*\n            for (let rule of this.rules) {\n                if (rule.is_mono && rule.matches(current_cell)) {\n                    rs.push(rule);\n                } else if (!rule.is_mono && rule.m) {\n                    \n                }\n            }\n            this.rule_check_cache[current_cell] = rs;\n            */\n            rs = this.rules;\n        }\n        else {\n            rs = z;\n        }\n        for (let rule of rs) {\n            if (rule.is_mono) {\n                let r = rule.matches(current_cell);\n                if (r) {\n                    let t = this.sim_time + Math.log(1 / random_1.default.float()) / rule.rate;\n                    // if (best_mono_transition !== null && best_mono_transition.execution_time > t) continue;\n                    let tr = new Transition_State_1.default(this.sim_time, t);\n                    tr.add_old_cell(x, y, current_cell);\n                    tr.add_new_cell(x, y, r[0]);\n                    possible_transitions.push(tr);\n                }\n            }\n            else {\n                let neighbour_offsets = [];\n                if (this.geometry == 'square') {\n                    neighbour_offsets = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n                }\n                else {\n                    //TODO: hex offsets\n                }\n                for (let [xd, yd] of neighbour_offsets) {\n                    if (y + yd >= 0 && y + yd < this.current_state.length && x + xd >= 0 && x + xd < this.current_state[y + yd].length) {\n                        if (ignore.has([x + xd, y + yd]))\n                            continue;\n                        let other_cell = this.current_state[y + yd][x + xd];\n                        let r = rule.matches(current_cell, other_cell);\n                        if (r) {\n                            let t = this.sim_time + Math.log(1 / random_1.default.float()) / rule.rate;\n                            //if (best_transition && best_transition.execution_time > t) continue;\n                            let tr = new Transition_State_1.default(this.sim_time, t);\n                            tr.add_old_cell(x, y, current_cell);\n                            tr.add_old_cell(x + xd, y + yd, other_cell);\n                            tr.add_new_cell(x, y, r[0]);\n                            tr.add_new_cell(x + xd, y + yd, r[1]);\n                            possible_transitions.push(tr);\n                        }\n                        r = rule.matches(other_cell, current_cell);\n                        if (r) {\n                            let t = this.sim_time + Math.log(1 / random_1.default.float()) / rule.rate;\n                            //if (best_transition && best_transition.execution_time > t) continue;\n                            let tr = new Transition_State_1.default(this.sim_time, t);\n                            tr.add_old_cell(x, y, current_cell);\n                            tr.add_old_cell(x + xd, y + yd, other_cell);\n                            tr.add_new_cell(x, y, r[1]);\n                            tr.add_new_cell(x + xd, y + yd, r[0]);\n                            possible_transitions.push(tr);\n                        }\n                    }\n                }\n            }\n        }\n        return possible_transitions;\n    }\n    sim_started() {\n        return this.sim_queue !== null;\n    }\n    increase_size() {\n        this.pixels_per_node += 1;\n    }\n    decrease_size() {\n        if (this.pixels_per_node <= 1) {\n            this.pixels_per_node -= 0.1;\n        }\n        else {\n            this.pixels_per_node -= 1;\n        }\n    }\n}\nexports.default = Surface_CRN;\nSurface_CRN.parser = { parse_import_files: Parser_1.parse_import_files, parse_code: Parser_1.parse_code };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Colour_Map {\n    constructor(init) {\n        this.colours = new Set();\n        this.example_colours = ['#ffffff', '#000000', '#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#42d4f4', '#f032e6', '#bfef45', '#fabed4', '#469990', '#dcbeff', '#9A6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#a9a9a9'];\n        this.temp_colours = new Map();\n        if (init)\n            this.colours = init;\n    }\n    find_colour(s) {\n        for (let c of this.colours) {\n            if ([...c.species.values()].some((s1) => s1.includes(s))) {\n                return c;\n            }\n        }\n        let b = this.temp_colours.get(s);\n        return b === undefined ? null : b;\n    }\n    export() {\n        return [...this.colours.values()].map(c => '{' + c.name + '} ' + [...c.species.values()].map(s => s.toString()).join(' ') + ' : (' + c.rgb().join(',') + ')');\n    }\n    new_colour() {\n        let c = this.example_colours.find((a) => {\n            if ([...this.temp_colours.values(), ...this.colours.values()].find((c) => c.hex() === a) !== undefined)\n                return false;\n            return true;\n        });\n        if (c === undefined) {\n            return \"#000000\";\n        }\n        else {\n            return c;\n        }\n    }\n    add(c) {\n        this.colours.add(c);\n    }\n    delete(c) {\n        this.colours.delete(c);\n    }\n    add_temp(s, c) {\n        this.temp_colours.set(s, c);\n    }\n    clear_temp() {\n        this.temp_colours.clear();\n    }\n}\nexports.default = Colour_Map;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Transition_State {\n    constructor(update_time, execution_time) {\n        this.old_cells = [];\n        this.new_cells = [];\n        this.new_transitions = null;\n        this.update_time = update_time;\n        this.execution_time = execution_time;\n    }\n    add_old_cell(x, y, old_val) {\n        this.old_cells.push([x, y, old_val]);\n    }\n    add_new_cell(x, y, new_val) {\n        this.new_cells.push([x, y, new_val]);\n    }\n    add_future_transitions(t) {\n        this.new_transitions = t;\n    }\n}\nexports.default = Transition_State;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse_import_files = exports.parse_code = void 0;\nconst Species_Matcher_1 = __importDefault(require(\"./Species_Matcher\"));\nconst Transition_Rule_1 = __importDefault(require(\"./Transition_Rule\"));\nconst Colour_1 = __importDefault(require(\"./Colour\"));\nconst Surface_CRN_1 = __importDefault(require(\"./Surface_CRN\"));\nfunction parse_rule(line) {\n    if ((line.match(/->/g) || []).length != 1)\n        return false;\n    let rate = 1;\n    line = line.replace(/\\((\\d*(?:\\.\\d+)?)\\)/, (_, x) => { rate = +x; return ''; });\n    let [start, end] = line.split('->').map(a => a.split('+').map(b => new Species_Matcher_1.default(b.trim()))); // Note change how transition rules are formed\n    //TODO: add more conditions (and error messages?)\n    if (start.length != end.length || start.length > 2 || start.length == 0)\n        return false;\n    return new Transition_Rule_1.default({ reactants: start, products: end, rate: rate, is_mono: start.length == 1 });\n}\nfunction parse_option(line) {\n    if ((line.match(/=/g) || []).length != 1)\n        return false;\n    return line.split('=').map(a => a.trim());\n}\nfunction parse_colour(line) {\n    let vars = line.match(/^(?:\\{([^}]+)\\})? *((?: *[^,: ]+,? *?)+) *: *\\((\\d+) *, *(\\d+) *, *(\\d+)\\)$/);\n    if (vars == null)\n        return false;\n    var sp = vars[2].split(/,\\s*|\\s+/).map(a => new Species_Matcher_1.default(a.trim()));\n    return new Colour_1.default({ name: vars[1] || vars[2], species: new Set(sp), red: +vars[3], green: +vars[4], blue: +vars[5] });\n}\nfunction parse_line(line, program) {\n    var rule = parse_rule(line);\n    if (rule !== false) {\n        program.rules.push(rule);\n        return true;\n    }\n    var name_colour = parse_colour(line);\n    if (name_colour !== false) {\n        program.colour_map.add(name_colour);\n        return true;\n    }\n    var option = parse_option(line);\n    if (option !== false) {\n        let [key, val] = option;\n        program.set_option(key, val);\n        return true;\n    }\n    return false;\n}\nfunction parse_init_state(line) {\n    // TODO: add more error checking\n    return line.split(/\\s+|,/);\n}\nfunction parse_code(data) {\n    let init_state_section = false;\n    let program = new Surface_CRN_1.default();\n    for (let line of data) {\n        line = line.trim().replace(/#.*/, \"\");\n        if (line == \"\")\n            continue;\n        if (!init_state_section) {\n            if (line == \"!START_INIT_STATE\") {\n                init_state_section = true;\n                continue;\n            }\n            parse_line(line, program);\n        }\n        else {\n            if (line == \"!END_INIT_STATE\") {\n                init_state_section = false;\n                continue;\n            }\n            let val = parse_init_state(line);\n            program.initial_state.push(val);\n        }\n    }\n    return program;\n}\nexports.parse_code = parse_code;\n// Import project as a list of files\n// TODO: change false to list of warnings\nasync function parse_import_files(input_files) {\n    if (!input_files) {\n        //show error\n        console.log(\"No input files\");\n        return false;\n    }\n    class Manifest_File {\n        constructor() {\n            this.data = [];\n            this.imported = false;\n        }\n    }\n    let manifest_maps = new Map();\n    ;\n    for (let file of input_files) {\n        var m = new Manifest_File();\n        m.data = (await file.text()).split(\"\\n\").map(a => a.trim().replace(/#.*/, ''));\n        manifest_maps.set(file.name, m);\n    }\n    for (let [key, m] of manifest_maps) {\n        for (let s of m.data) {\n            if (s.match(/^!INCLUDE /)) {\n                //TODO: replace includes\n            }\n        }\n    }\n    let lines = [];\n    for (let [_, m] of manifest_maps) {\n        if (!m.imported)\n            lines.push(...m.data);\n    }\n    return parse_code(lines);\n}\nexports.parse_import_files = parse_import_files;\n"],"sourceRoot":""}