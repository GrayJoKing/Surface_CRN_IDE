{"version":3,"sources":["../../surface_crn/Species.js","../../surface_crn/Transition_Rule.js","../../surface_crn/Colour.js","../../surface_crn/Colour_Map.js","../../surface_crn/Parser.js","components/HeaderComponent.tsx","components/InitialStateComponent.tsx","components/TransitionRulesComponent.tsx","components/SimulatorOptionsComponent.tsx","components/ColourMappingComponent.tsx","components/ImportExportComponent.tsx","index.tsx","../../surface_crn/Surface_CRN.js"],"names":["Object","defineProperty","exports","value","default","init","this","matcher","assign","is_mono","reactants","products","rate","Colour","red","green","blue","species","Colour_Map","Map","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","parse_import_files","parse_code","Species_1","require","Transition_Rule_1","Colour_1","Surface_CRN_1","parse_line","line","program","rule","match","length","replace","_","x","split","map","a","b","trim","start","end","parse_rule","rules","push","name_colour","vars","sp","parse_colour","colour_map","set","option","parse_option","val","key","options","parse_init_state","data","init_state_section","initial_state","input_files","console","log","Manifest_File","imported","manifest_maps","file","m","text","name","f","lines","HeaderComponent","className","React","Component","InitialStateComponent","props","model","CanvasGrid","canvas_ref","setState","canvas_state","grid_type","y","s","c","state","find_colour","SCRN_Colour","draw","ref","r","TransitionRulesComponent","id","SimulatorOptionsComponent","ColourMappingComponent","ImportExportComponent","import_code","type","multiple","onClick","current_model","Surface_CRN","files","document","getElementById","parser","new_model","update_page","rule_list","textContent","row","createElement","entries","item","i","appendChild","j","inp","update_rules","colour_list","rgb","join","update_colour_map","ReactDOM","render","StrictMode","SCRN_Colour_Map","SCRN_Transition_Rule","SCRN_Species","Colour_Map_1","Parser_1"],"mappings":"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","file":"static/js/main.90fffafe.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Species {\n    constructor(init) {\n        this.matcher = \"\";\n        Object.assign(this, init);\n    }\n}\nexports.default = Species;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Transition_Rule {\n    constructor(init) {\n        this.is_mono = true;\n        this.reactants = [];\n        this.products = [];\n        this.rate = 1;\n        Object.assign(this, init);\n    }\n}\nexports.default = Transition_Rule;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Colour {\n    constructor(init) {\n        this.red = 0;\n        this.green = 0;\n        this.blue = 0;\n        this.species = [];\n        Object.assign(this, init);\n    }\n    rgb() {\n        return [this.red, this.green, this.blue];\n    }\n}\nexports.default = Colour;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Colour_Map extends Map {\n    constructor(init) {\n        super();\n        Object.assign(this, init);\n    }\n}\nexports.default = Colour_Map;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse_import_files = exports.parse_code = void 0;\nconst Species_1 = __importDefault(require(\"./Species\"));\nconst Transition_Rule_1 = __importDefault(require(\"./Transition_Rule\"));\nconst Colour_1 = __importDefault(require(\"./Colour\"));\nconst Surface_CRN_1 = __importDefault(require(\"./Surface_CRN\"));\nfunction parse_rule(line) {\n    if ((line.match(/->/g) || []).length != 1)\n        return false;\n    let rate = 1;\n    line = line.replace(/\\((\\d+)\\)/, (_, x) => { rate = +x; return ''; });\n    let [start, end] = line.split('->').map(a => a.split('+').map(b => new Species_1.default({ matcher: b.trim() })));\n    //TODO: add more conditions (and error messages?)\n    if (start.length != end.length || start.length > 2 || start.length == 0)\n        return false;\n    return new Transition_Rule_1.default({ reactants: start, products: end, rate: rate, is_mono: start.length == 1 });\n}\nfunction parse_option(line) {\n    if ((line.match(/=/g) || []).length != 1)\n        return false;\n    return line.split('=').map(a => a.trim());\n}\nfunction parse_colour(line) {\n    let vars = line.match(/^(?:\\{([^}]+)\\})? *((?: *[^,: ]+,? *)+) *: *\\((\\d+) *, *(\\d+) *, *(\\d+)\\)$/);\n    if (vars == null)\n        return false;\n    var sp = vars[2].split(/,\\s*|\\s+/).map(a => new Species_1.default({ matcher: a.trim() }));\n    return [vars[1], new Colour_1.default({ species: sp, red: +vars[3], green: +vars[4], blue: +vars[5] })];\n}\nfunction parse_line(line, program) {\n    var rule = parse_rule(line);\n    if (rule !== false) {\n        program.rules.push(rule);\n        return true;\n    }\n    var name_colour = parse_colour(line);\n    if (name_colour !== false) {\n        program.colour_map.set(...name_colour);\n        return true;\n    }\n    var option = parse_option(line);\n    if (option !== false) {\n        let [val, key] = option;\n        program.options.set(val, key);\n        return true;\n    }\n    return false;\n}\nfunction parse_init_state(line) {\n    return line.split(/\\s+|,/).map(a => new Species_1.default({ matcher: a }));\n}\nfunction parse_code(data) {\n    let init_state_section = false;\n    let program = new Surface_CRN_1.default();\n    for (let line of data) {\n        line = line.trim().replace(/#.*/, \"\");\n        if (line == \"\")\n            continue;\n        if (!init_state_section) {\n            if (line == \"!START_INIT_STATE\") {\n                init_state_section = true;\n                continue;\n            }\n            parse_line(line, program);\n        }\n        else {\n            if (line == \"!END_INIT_STATE\") {\n                init_state_section = false;\n                continue;\n            }\n            let val = parse_init_state(line);\n            program.initial_state.push(val);\n        }\n    }\n    return program;\n}\nexports.parse_code = parse_code;\n// Import project as a list of files\n// TODO: change false to list of warnings\nfunction parse_import_files(input_files) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!input_files) {\n            //show error\n            console.log(\"No input files\");\n            return false;\n        }\n        class Manifest_File {\n            constructor() {\n                this.data = [];\n                this.imported = false;\n            }\n        }\n        let manifest_maps = new Map();\n        ;\n        for (let file of input_files) {\n            var m = new Manifest_File();\n            m.data = (yield file.text()).split(\"\\n\").map(a => a.trim().replace(/#.*/, ''));\n            manifest_maps.set(file.name, m);\n        }\n        for (let [key, m] of manifest_maps) {\n            for (let s of m.data) {\n                if (s.match(/^!INCLUDE /)) {\n                    //TODO: replace includes\n                }\n            }\n        }\n        let lines = [];\n        for (let [key, m] of manifest_maps) {\n            if (!m.imported)\n                lines.push(...m.data);\n        }\n        return parse_code(lines);\n    });\n}\nexports.parse_import_files = parse_import_files;\n","import React from 'react';\r\n\r\nexport default class HeaderComponent extends React.Component {\r\n\trender() {\r\n\t\treturn <header className=\"grid\">\r\n\t\t\t<nav className=\"grid\">\r\n\t\t\t\t<h2 className=\"grid title\">\r\n\t\t\t\t\tSurface CRN Simulator\r\n\t\t\t\t</h2>\r\n\t\t\t\t<h4 className=\"grid simulator_options\">\r\n\t\t\t\t\t(sim options)\r\n\t\t\t\t</h4>\r\n\t\t\t\t<h4 className=\"grid simulator_controls\">\r\n\t\t\t\t\t(sim controls)\r\n\t\t\t\t</h4>\r\n\t\t\t</nav>\r\n\t\t</header>;\r\n\t}\r\n}","import React, {useRef, useEffect} from 'react';\r\nimport Surface_CRN, {SCRN_Species, SCRN_Transition_Rule, SCRN_Colour_Map, SCRN_Colour} from 'surface_crn';\r\n\r\ninterface InitialStateProps {\r\n\tmodel : Surface_CRN\r\n}\r\n\r\nexport default class InitialStateComponent extends React.Component<InitialStateProps> {\t\r\n\tpublic constructor(props: InitialStateProps) {\r\n\t\tsuper(props);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn <div className=\"grid panel state_panel\">\r\n\t\t\t<h3 className=\"panel_header\"> Initial State </h3>\r\n\t\t\t\r\n\t\t\t<CanvasGrid\r\n\t\t\t\tmodel = {this.props.model}\r\n\t\t\t/>\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\ninterface CanvasGridProps {\r\n\tmodel : Surface_CRN,\r\n}\r\n\r\ninterface CanvasGridState extends React.ComponentState {\r\n\tcanvas_state : SCRN_Species[][];\r\n\tcolour_map: SCRN_Colour_Map,\r\n\tgrid_type: 'square'|'hex'\r\n}\r\n\r\nclass CanvasGrid extends React.Component<CanvasGridProps, CanvasGridState> {\r\n\tcanvas_ref : HTMLCanvasElement|null = null;\r\n\t\r\n\tpublic constructor(props: CanvasGridProps) {\r\n\t\tsuper(props);\r\n\t\tlet {model} = props;\r\n\t\tthis.setState({canvas_state: model.initial_state, colour_map: model.colour_map, grid_type: model.grid_type});\r\n\t}\r\n\t\r\n\tpublic updateGrid(x : number, y: number, s : SCRN_Species) {\r\n\t\t\r\n\t\tlet c = this.state.colour_map.find_colour(s);\r\n\t\tif (c === null) c = new SCRN_Colour({name: \"white\", red:0, green:0, blue:0});;\r\n\t\t\r\n\t\tthis.draw(x,y,c);\r\n\t}\r\n\t\r\n\tprivate draw(x : number, y: number, c : SCRN_Colour) {\r\n\t\t\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t/*\r\n\t\tfor (let [x, row] of this.state.canvas_state) {\r\n\t\t\tfor (let [y, elem] of row) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}*/\r\n\t\treturn <canvas ref={r => this.canvas_ref = r}>\r\n\t\t\t\t\r\n\t\t\t</canvas>\r\n\t\t\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class TransitionRulesComponent extends React.Component {\r\n\trender() {\r\n\t\treturn <div className=\"grid panel rules_panel\">\r\n\t\t\t<h3 className=\"panel_header\"> Transition Rules </h3>\r\n\t\t\t\r\n\t\t\t<div id=\"rule_container\">\r\n\t\t\t\t<table id=\"rule_list\">\r\n\t\t\t\t\t\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class SimulatorOptionsComponent extends React.Component {\r\n\trender() {\r\n\t\treturn <div className=\"grid panel options_panel\">\r\n\t\t\t<h3> Simulator Options </h3>\r\n\t\t</div>;\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class ColourMappingComponent extends React.Component {\r\n\trender() {\r\n\t\treturn <div className=\"grid panel colour_panel\">\r\n\t\t\t<h3> Colour Mapping </h3>\r\n\t\t\t\r\n\t\t\t<div id=\"colour_container\">\r\n\t\t\t\t<table id=\"colour_list\">\r\n\t\t\t\t\t\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}","import React, { useRef } from 'react';\r\n\r\ninterface ImportProps {\r\n\timport_code : () => Promise<void>,\r\n}\r\n\r\nexport class ImportExportComponent extends React.Component<ImportProps> {\r\n\t\r\n\tpublic constructor(props: ImportProps) {\r\n\t\tsuper(props);\r\n\t}\r\n\t\r\n\t\r\n\trender () {\r\n\t\tconst { import_code } = this.props;\r\n\t\treturn <div className=\"grid panel import_export_panel\">\r\n\t\t\t\t<h3> Import/Export </h3>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"file\" id=\"import_input\" multiple />\r\n\t\t\t\t\t<button type=\"submit\" id=\"import_submit\" onClick={import_code}> Import </button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport default ImportExportComponent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SCRN_Species, SCRN_Transition_Rule, SCRN_Colour_Map, SCRN_Colour} from 'surface_crn';\nimport Surface_CRN from 'surface_crn';\nimport './index.css';\nimport HeaderComponent from './components/HeaderComponent';\nimport InitialStateComponent from './components/InitialStateComponent';\nimport TransitionRulesComponent from './components/TransitionRulesComponent';\nimport SimulatorOptionsComponent from './components/SimulatorOptionsComponent';\nimport ColourMappingComponent from './components/ColourMappingComponent';\nimport ImportExportComponent from './components/ImportExportComponent';\n\nlet current_model : Surface_CRN = new Surface_CRN();\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<title> Surface CRN Simulator </title>\n\t\t<div className=\"main_grid grid\">\n\t\t\t<HeaderComponent />\n\t\t\t<InitialStateComponent model={current_model} />\n\t\t\t<TransitionRulesComponent />\n\t\t\t<SimulatorOptionsComponent />\n\t\t\t<ColourMappingComponent />\n\t\t\t<ImportExportComponent import_code={import_code}/>\n\t\t</div>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nasync function import_code() {\n\tconst files = (document.getElementById(\"import_input\") as HTMLInputElement).files;\n\tif (files === null) return;\n\t\n\tlet new_model = await Surface_CRN.parser.parse_import_files([...files]);\n\t\n\tif (new_model === false) {\n\t\t//show errors\n\t} else {\n\t\tcurrent_model = new_model;\n\t\tupdate_page();\n\t}\n}\n\nfunction update_page() {\n\tupdate_rules(current_model.rules);\n\tupdate_colour_map(current_model.colour_map);\n\tupdate_init_state(current_model.initial_state, current_model.colour_map);\n}\n\nfunction update_rules(rules:SCRN_Transition_Rule[]) {\n\t// TODO: convert to React style\n\tvar rule_list = document.getElementById(\"rule_list\");\n\n\tif (rule_list === null) return;\n\t\n\trule_list.textContent = '';\n\t\n\tfor (let r of rules) {\n\t\tvar row = document.createElement(\"tr\");\n\t\tfor (var [i, type] of [r.reactants, r.products].entries()) {\n\t\t\tvar item;\n\t\t\tif (i === 1) {\n\t\t\t\titem = document.createElement(\"td\");\n\t\t\t\titem.textContent = '=>';\n\t\t\t\trow.appendChild(item);\n\t\t\t}\n\t\t\tfor (var [j, species] of type.entries()) {\n\t\t\t\tif (j === 1) {\n\t\t\t\t\titem = document.createElement(\"td\");\n\t\t\t\t\titem.textContent = '+';\n\t\t\t\t\trow.appendChild(item);\n\t\t\t\t}\n\t\t\t\titem = document.createElement(\"td\");\n\t\t\t\tvar inp = document.createElement(\"input\");\n\t\t\t\tinp.type = \"text\";\n\t\t\t\tinp.value = species.matcher;\n\t\t\t\titem.appendChild(inp);\n\t\t\t\trow.appendChild(item);\n\t\t\t}\n\t\t}\n\t\trule_list.appendChild(row);\n\t}\n}\n\nfunction update_colour_map(colour_map:SCRN_Colour_Map) {\n\t// TODO: convert to React style\n\tvar colour_list = document.getElementById(\"colour_list\");\n\tif (colour_list == null) return;\n\t\n\tcolour_list.textContent = '';\n\t\n\tfor (let [name, c] of colour_map) {\n\t\tvar row = document.createElement(\"tr\");\n\t\tvar item;\n\t\titem = document.createElement(\"td\");\n\t\tvar inp = document.createElement(\"input\");\n\t\tinp.type = \"text\";\n\t\tinp.value = name;\n\t\titem.appendChild(inp);\n\t\trow.appendChild(item);\n\n\t\titem = document.createElement(\"td\");\n\t\titem.textContent = '('+c.rgb().join(',')+')';\n\t\trow.appendChild(item);\n\t\tfor (var species of c.species) {\n\t\t\titem = document.createElement(\"td\");\n\t\t\tinp = document.createElement(\"input\");\n\t\t\tinp.type = \"text\";\n\t\t\tinp.value = species.matcher;\n\t\t\titem.appendChild(inp);\n\t\t\trow.appendChild(item);\n\t\t}\n\t\tcolour_list.appendChild(row);\n\t}\n}\n\nfunction update_init_state(init_state:SCRN_Species[][], colour_map:SCRN_Colour_Map) {\n\t\n}","\"use strict\";\n// TODO: Move to npm package\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SCRN_Colour = exports.SCRN_Colour_Map = exports.SCRN_Transition_Rule = exports.SCRN_Species = void 0;\nconst Species_1 = __importDefault(require(\"./Species\"));\nexports.SCRN_Species = Species_1.default;\nconst Transition_Rule_1 = __importDefault(require(\"./Transition_Rule\"));\nexports.SCRN_Transition_Rule = Transition_Rule_1.default;\nconst Colour_Map_1 = __importDefault(require(\"./Colour_Map\"));\nexports.SCRN_Colour_Map = Colour_Map_1.default;\nconst Colour_1 = __importDefault(require(\"./Colour\"));\nexports.SCRN_Colour = Colour_1.default;\nconst Parser_1 = require(\"./Parser\");\nclass Surface_CRN {\n    constructor() {\n        this.initial_state = [];\n        this.rules = [];\n        this.colour_map = new Colour_Map_1.default();\n        this.options = new Map();\n    }\n}\nexports.default = Surface_CRN;\nSurface_CRN.parser = { parse_import_files: Parser_1.parse_import_files, parse_code: Parser_1.parse_code };\n"],"sourceRoot":""}